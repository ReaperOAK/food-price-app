{"version":3,"file":"static/js/529.618b928b.chunk.js","mappings":"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","sources":["components/layout/AdminNavbar.js","components/common/StateSelect.js","components/common/CitySelect.js","components/admin/RateForm.js","components/admin/AddStateForm.js","components/admin/AddCityForm.js","components/rates/EggRatesTable.js","pages/AdminPage.js"],"sourcesContent":["import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst AdminNavbar = ({setIsAuthenticated}) => {\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  return (\n    <nav className=\"bg-gray-800 p-4 shadow-lg\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <div>\n          <Link to=\"/admin\" className=\"text-white text-2xl font-bold\">Admin Dashboard</Link>\n        </div>\n        <div className=\"flex space-x-4\">\n          <button \n            onClick={handleLogout} \n            className=\"text-white bg-red-600 hover:bg-red-700 px-4 py-2 rounded transition duration-150 ease-in-out\"\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default AdminNavbar;\n","import React from 'react';\nimport Select from 'react-select';\n\nconst StateSelect = ({ states, selectedState, handleStateChange }) => (\n  <Select\n    options={states}\n    value={selectedState}\n    onChange={handleStateChange}\n    className=\"w-full mb-4\"\n    placeholder=\"Select State\"\n  />\n);\n\nexport default StateSelect;","import React from 'react';\nimport Select from 'react-select';\n\nconst CitySelect = ({ options, selectedOptions, setSelectedOptions }) => {\n  // Remove duplicate cities from options\n  const uniqueOptions = Array.from(new Set(options.map(option => option.value)))\n    .map(value => options.find(option => option.value === value));\n\n  return (\n    <Select\n      isMulti\n      options={uniqueOptions}\n      value={selectedOptions}\n      onChange={setSelectedOptions}\n      className=\"w-full\"\n      styles={{\n        control: (base) => ({\n          ...base,\n          backgroundColor: 'white',\n          borderColor: 'transparent',\n          boxShadow: 'none',\n          '&:hover': {\n            borderColor: 'transparent',\n          },\n          padding: '0.5rem', // Add padding for better touch target\n          borderRadius: '0.375rem', // Tailwind rounded\n        }),\n        menu: (base) => ({\n          ...base,\n          zIndex: 9999,\n        }),\n        placeholder: (base) => ({\n          ...base,\n          color: '#A0AEC0', // Placeholder color for better contrast\n        }),\n      }}\n      placeholder=\"Select Cities, States\"\n    />\n  );\n};\n\nexport default CitySelect;","import React from 'react';\n\nconst RateForm = ({\n  eggRate,\n  setEggRate,\n  handleSubmit,\n  handleSelectAll,\n  handleCopyPreviousRates,\n}) => {\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-6 grid grid-cols-1 gap-4\">\n      <button\n        type=\"button\"\n        onClick={handleSelectAll}\n        className=\"bg-green-600 text-white p-3 rounded w-full hover:bg-green-700 transition\"\n      >\n        Select All Cities\n      </button>\n      <input\n        type=\"date\"\n        value={eggRate.date}\n        onChange={(e) => setEggRate({ ...eggRate, date: e.target.value })}\n        className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n        required\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Rate\"\n        value={eggRate.rate}\n        onChange={(e) => setEggRate({ ...eggRate, rate: e.target.value })}\n        className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n        required\n      />\n      <button\n        type=\"submit\"\n        className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n      >\n        Update Rates\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleCopyPreviousRates}\n        className=\"bg-yellow-600 text-white p-3 rounded w-full hover:bg-yellow-700 transition\"\n      >\n        Copy Previous Rates\n      </button>\n    </form>\n  );\n};\n\nexport default RateForm;","import React from 'react';\n\nconst AddStateForm = ({ newState, setNewState, handleAddState }) => (\n  <form onSubmit={handleAddState} className=\"mb-6 grid grid-cols-1 gap-4\">\n    <input\n      type=\"text\"\n      placeholder=\"New State\"\n      value={newState}\n      onChange={(e) => setNewState(e.target.value)}\n      className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n      required\n    />\n    <button\n      type=\"submit\"\n      className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n    >\n      Add State\n    </button>\n  </form>\n);\n\nexport default AddStateForm;","import React from 'react';\nimport Select from 'react-select';\n\nconst AddCityForm = ({\n  states,\n  newCity,\n  setNewCity,\n  newCityState,\n  setNewCityState,\n  handleAddCity,\n}) => (\n  <form onSubmit={handleAddCity} className=\"mb-6 grid grid-cols-1 gap-4\">\n    <Select\n      options={states}\n      value={newCityState}\n      onChange={setNewCityState}\n      className=\"w-full mb-4\"\n      placeholder=\"Select State for New City\"\n    />\n    <input\n      type=\"text\"\n      placeholder=\"New City\"\n      value={newCity}\n      onChange={(e) => setNewCity(e.target.value)}\n      className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n      required\n    />\n    <button\n      type=\"submit\"\n      className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n    >\n      Add City\n    </button>\n  </form>\n);\n\nexport default AddCityForm;","import React, { useState } from 'react';\n\nconst EggRatesTable = ({ sortedEggRates, handleSort, setEggRate, handleDelete, handleEditRate }) => {\n  const [editingRate, setEditingRate] = useState(null);\n  const [editedRate, setEditedRate] = useState({});\n\n  const handleEditClick = (rate) => {\n    setEditingRate(rate.id);\n    setEditedRate(rate);\n  };\n\n  const handleSaveClick = () => {\n    handleEditRate(editedRate);\n    setEditingRate(null);\n  };\n\n  const handleCancelClick = () => {\n    setEditingRate(null);\n    setEditedRate({});\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setEditedRate((prevRate) => ({\n      ...prevRate,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full bg-white border border-gray-300\">\n        <thead>\n          <tr className=\"bg-gray-200\">\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('city')}\n            >\n              City\n            </th>\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('state')}\n            >\n              State\n            </th>\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('date')}\n            >\n              Date\n            </th>\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('rate')}\n            >\n              Rate\n            </th>\n            <th className=\"border border-gray-300 p-3 text-left\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedEggRates.map((rate) => (\n            <tr key={`${rate.city}-${rate.state}-${rate.date}`} className=\"hover:bg-gray-100\">\n              <td className=\"border border-gray-300 p-3\">{rate.city}</td>\n              <td className=\"border border-gray-300 p-3\">{rate.state}</td>\n              <td className=\"border border-gray-300 p-3\">\n                {editingRate === rate.id ? (\n                  <input\n                    type=\"date\"\n                    name=\"date\"\n                    value={editedRate.date}\n                    onChange={handleChange}\n                    className=\"border border-gray-300 p-2 rounded w-full\"\n                  />\n                ) : (\n                  rate.date\n                )}\n              </td>\n              <td className=\"border border-gray-300 p-3\">\n                {editingRate === rate.id ? (\n                  <input\n                    type=\"number\"\n                    name=\"rate\"\n                    value={editedRate.rate}\n                    onChange={handleChange}\n                    className=\"border border-gray-300 p-2 rounded w-full\"\n                  />\n                ) : (\n                  `$${rate.rate}`\n                )}\n              </td>\n              <td className=\"border border-gray-300 p-3 flex space-x-2\">\n                {editingRate === rate.id ? (\n                  <>\n                    <button\n                      onClick={handleSaveClick}\n                      className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\"\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={handleCancelClick}\n                      className=\"bg-gray-500 text-white p-2 rounded hover:bg-gray-600 transition\"\n                    >\n                      Cancel\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    <button\n                      onClick={() => handleEditClick(rate)}\n                      className=\"bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      onClick={() => handleDelete(rate)}\n                      className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition\"\n                    >\n                      Delete\n                    </button>\n                  </>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default EggRatesTable;","import React, { useState, useEffect, useCallback } from 'react';\nimport Select from 'react-select';\nimport AdminNavbar from '../components/layout/AdminNavbar';\nimport StateSelect from '../components/common/StateSelect';\nimport CitySelect from '../components/common/CitySelect';\nimport RateForm from '../components/admin/RateForm';\nimport AddStateForm from '../components/admin/AddStateForm';\nimport AddCityForm from '../components/admin/AddCityForm';\nimport EggRatesTable from '../components/rates/EggRatesTable';\n\nconst AdminPage = ({ setIsAuthenticated }) => {\n  const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\n  const [eggRate, setEggRate] = useState({ date: today, rate: '' });\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [eggRates, setEggRates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortConfig, setSortConfig] = useState({ key: 'city', direction: 'ascending' });\n  const [states, setStates] = useState([]);\n  const [selectedState, setSelectedState] = useState(null);\n  const [newState, setNewState] = useState('');\n  const [newCity, setNewCity] = useState('');\n  const [newCityState, setNewCityState] = useState(null);\n  const [removeState, setRemoveState] = useState('');\n  const [removeCity, setRemoveCity] = useState(null);\n  const [removeCityState, setRemoveCityState] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(today);\n  \n  // Define fetchEggRates function to get egg rates data\n  const fetchEggRates = useCallback(() => {\n    setLoading(true);\n    fetch(`/php/api/rates/get_all_rates.php?date=${selectedDate}`)\n      .then(res => res.json())\n      .then(data => {\n        setEggRates(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching rates:', error);\n        setError(error);\n        setLoading(false);\n      });\n  }, [selectedDate]);\n  \n  // Define fetchCitiesAndStates function to get location data\n  const fetchCitiesAndStates = useCallback(() => {\n    fetch('/php/api/location/get_states_and_cities.php')\n      .then(res => res.json())\n      .then(data => {\n        const combinedOptions = [];\n        const stateOptions = [];\n        for (const state in data) {\n          stateOptions.push({ value: state, label: state });\n          combinedOptions.push({\n            value: state,\n            label: state,\n            type: 'state',\n          });\n          data[state].forEach(city => {\n            combinedOptions.push({\n              value: `${city}-${state}`, // Ensure unique value\n              label: `${city}, ${state}`,\n              type: 'city',\n            });\n          });\n        }\n        setOptions(combinedOptions);\n        setStates(stateOptions);\n      })\n      .catch(error => console.error('Error fetching states and cities:', error));\n  }, []);\n\n  // Use fetchEggRates in useEffect instead of duplicate code\n  useEffect(() => {\n    fetchEggRates();\n  }, [fetchEggRates]);\n\n  // Use fetchCitiesAndStates in useEffect\n  useEffect(() => {\n    fetchCitiesAndStates();\n  }, [fetchCitiesAndStates]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const payload = selectedOptions.map(option => {\n      const [cityName, state] = option.type === 'city' ? option.label.split(', ') : [null, option.value];\n      return {\n        city: cityName,\n        state: state || '', // Ensure state is not null\n        date: eggRate.date,\n        rate: eggRate.rate,\n        type: option.type,\n      };\n    });\n\n    fetch('/php/api/rates/update_multiple_rates.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload),\n    })\n      .then(res => res.json())\n      .then(response => {\n        fetchEggRates(); // Refresh the list of egg rates\n        resetForm(); // Reset form\n      })\n      .catch(error => console.error(\"Error submitting data:\", error));\n  };\n\n  const handleDelete = (rate) => {\n    fetch('/php/api/rates/delete_rate.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: rate.id }), // Send ID for deletion\n    })\n      .then(res => res.json())\n      .then(response => {\n        fetchEggRates(); // Refresh the list of egg rates\n      })\n      .catch(error => console.error(\"Error deleting item:\", error));\n  };\n\n  const handleSort = (key) => {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const sortedEggRates = React.useMemo(() => {\n    let sortableRates = [...eggRates];\n    sortableRates.sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) {\n        return sortConfig.direction === 'ascending' ? -1 : 1;\n      }\n      if (a[sortConfig.key] > b[sortConfig.key]) {\n        return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n      return 0;\n    });\n    return sortableRates;\n  }, [eggRates, sortConfig]);\n\n  const handleStateChange = (selectedState) => {\n    setSelectedState(selectedState);\n    setSelectedOptions([]); // Reset selected options\n    const stateOptions = options.filter(option => option.type === 'city' && option.label.includes(selectedState.value));\n    setSelectedOptions(stateOptions);\n  };\n\n  const handleSelectAll = () => {\n    const allCities = options.filter(option => option.type === 'city');\n    setSelectedOptions(allCities);\n  };\n\n  const handleCopyPreviousRates = () => {\n    if (selectedOptions.length === 0) {\n      alert('Please select at least one city.');\n      return;\n    }\n  \n    const fetchLatestRates = async (cities) => {\n      console.log('Fetching latest rates for cities:', cities);\n      const response = await fetch('/php/api/rates/get_latest_rates.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cities),\n      });\n      const data = await response.json();\n      console.log('Fetched latest rates:', data);\n      return data;\n    };\n  \n    const updateRates = async () => {\n      const cities = selectedOptions\n        .filter(option => option.type === 'city') // Ensure only cities are selected\n        .map(option => {\n          const [cityName, state] = option.label.split(', ');\n          return { city: cityName, state: state };\n        });\n  \n      console.log('Selected cities for updating rates:', cities);\n  \n      const latestRates = await fetchLatestRates(cities);\n  \n      const payload = latestRates.map(rate => ({\n        city: rate.city,\n        state: rate.state,\n        date: eggRate.date,\n        rate: rate.rate || eggRate.rate,\n        type: 'city',\n      }));\n  \n      console.log('Payload for updating rates:', payload);\n  \n      fetch('/php/api/rates/update_multiple_rates.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      })\n        .then(res => res.json())\n        .then(response => {\n          console.log('Response from updating rates:', response);\n          fetchEggRates(); // Refresh the list of egg rates\n          resetForm(); // Reset form\n        })\n        .catch(error => console.error(\"Error submitting data:\", error));\n    };\n  \n    updateRates();\n  };\n\n  const handleAddState = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/add_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'state', name: newState }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setNewState(''); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error adding state:\", error));\n  };\n\n  const handleAddCity = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/add_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'city', name: newCity, state: newCityState.value }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setNewCity(''); // Reset form\n          setNewCityState(null); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error adding city:\", error));\n  };\n\n  const handleRemoveState = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/remove_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'state', name: removeState }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setRemoveState(''); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error removing state:\", error));\n  };\n\n  const handleRemoveCity = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/remove_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'city', name: removeCity.label.split(', ')[0], state: removeCityState.value }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setRemoveCity(null); // Reset form\n          setRemoveCityState(null); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error removing city:\", error));\n  };\n\n  const handleEditRate = (rate) => {\n    const updatedRates = eggRates.map(r => r.id === rate.id ? rate : r);\n    setEggRates(updatedRates);\n  \n    // Send the updated rate to the backend\n    fetch('/php/api/rates/update_rate.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(rate),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchEggRates(); // Refresh the list of egg rates\n        } else {\n          console.error(\"Error updating rate:\", response.error);\n        }\n      })\n      .catch(error => console.error(\"Error updating rate:\", error));\n  };\n\n  const resetForm = () => {\n    setEggRate({ date: today, rate: '' });\n    setSelectedOptions([]);\n    setSelectedState(null);\n    setRemoveState('');\n    setRemoveCity(null);\n    setRemoveCityState(null);\n    setNewState('');\n    setNewCity('');\n    setNewCityState(null);\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error loading data: {error.message}</div>;\n\n  return (\n    <>\n      <AdminNavbar setIsAuthenticated={setIsAuthenticated} />\n      <div className=\"p-6 bg-gray-100 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-md\">\n          <h1 className=\"text-3xl font-bold mb-6 text-center text-blue-600\">Admin Egg Rate Management</h1>\n          <div className=\"mb-6\">\n            <StateSelect\n              states={states}\n              selectedState={selectedState}\n              handleStateChange={handleStateChange}\n            />\n            <CitySelect\n              options={options}\n              selectedOptions={selectedOptions}\n              setSelectedOptions={setSelectedOptions}\n            />\n            <RateForm\n              eggRate={eggRate}\n              setEggRate={setEggRate}\n              handleSubmit={handleSubmit}\n              handleSelectAll={handleSelectAll}\n              handleCopyPreviousRates={handleCopyPreviousRates}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Add New State</h2>\n            <AddStateForm\n              newState={newState}\n              setNewState={setNewState}\n              handleAddState={handleAddState}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Add New City</h2>\n            <AddCityForm\n              states={states}\n              newCity={newCity}\n              setNewCity={setNewCity}\n              newCityState={newCityState}\n              setNewCityState={setNewCityState}\n              handleAddCity={handleAddCity}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Remove State</h2>\n            <form onSubmit={handleRemoveState} className=\"mb-6 grid grid-cols-1 gap-4\">\n              <Select\n                options={states}\n                value={states.find(state => state.value === removeState)}\n                onChange={(selectedOption) => setRemoveState(selectedOption.value)}\n                className=\"w-full mb-4\"\n                placeholder=\"Select State to Remove\"\n              />\n              <button type=\"submit\" className=\"bg-red-600 text-white p-3 rounded w-full hover:bg-red-700 transition\">\n                Remove State\n              </button>\n            </form>\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Remove City</h2>\n            <form onSubmit={handleRemoveCity} className=\"mb-6 grid grid-cols-1 gap-4\">\n              <Select\n                options={states}\n                value={states.find(state => state.value === removeCityState?.value)}\n                onChange={setRemoveCityState}\n                className=\"w-full mb-4\"\n                placeholder=\"Select State for City to Remove\"\n              />\n              <Select\n                options={options.filter(option => option.type === 'city' && option.label.includes(removeCityState?.value))}\n                value={removeCity}\n                onChange={setRemoveCity}\n                className=\"w-full mb-4\"\n                placeholder=\"Select City to Remove\"\n              />\n              <button type=\"submit\" className=\"bg-red-600 text-white p-3 rounded w-full hover:bg-red-700 transition\">\n                Remove City\n              </button>\n            </form>\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Current Egg Rates</h2>\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"date\">\n              Select Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n            />\n          </div>\n          <EggRatesTable\n            sortedEggRates={sortedEggRates}\n            handleSort={handleSort}\n            setEggRate={setEggRate}\n            handleDelete={handleDelete}\n            handleEditRate={handleEditRate}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AdminPage;"],"names":["_ref","setIsAuthenticated","navigate","useNavigate","_jsx","className","children","_jsxs","Link","to","onClick","handleLogout","states","selectedState","handleStateChange","Select","options","value","onChange","placeholder","selectedOptions","setSelectedOptions","uniqueOptions","Array","from","Set","map","option","find","isMulti","styles","control","base","_objectSpread","backgroundColor","borderColor","boxShadow","padding","borderRadius","menu","zIndex","color","eggRate","setEggRate","handleSubmit","handleSelectAll","handleCopyPreviousRates","onSubmit","type","date","e","target","required","rate","newState","setNewState","handleAddState","newCity","setNewCity","newCityState","setNewCityState","handleAddCity","sortedEggRates","handleSort","handleDelete","handleEditRate","editingRate","setEditingRate","useState","editedRate","setEditedRate","handleSaveClick","handleCancelClick","handleChange","name","prevRate","city","state","id","concat","_Fragment","handleEditClick","today","Date","toISOString","split","setOptions","eggRates","setEggRates","loading","setLoading","error","setError","sortConfig","setSortConfig","key","direction","setStates","setSelectedState","removeState","setRemoveState","removeCity","setRemoveCity","removeCityState","setRemoveCityState","selectedDate","setSelectedDate","fetchEggRates","useCallback","fetch","then","res","json","data","catch","console","fetchCitiesAndStates","combinedOptions","stateOptions","push","label","forEach","useEffect","React","sortableRates","sort","a","b","resetForm","message","AdminNavbar","StateSelect","filter","includes","CitySelect","RateForm","preventDefault","payload","cityName","method","headers","body","JSON","stringify","response","allCities","length","alert","async","cities","log","latestRates","fetchLatestRates","updateRates","AddStateForm","success","AddCityForm","selectedOption","htmlFor","EggRatesTable","updatedRates","r"],"sourceRoot":""}