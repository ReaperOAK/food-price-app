{"version":3,"file":"static/js/utility-vendor.2128b31e.chunk.js","mappings":"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","sources":["../node_modules/@remix-run/router/history.ts","../node_modules/@remix-run/router/utils.ts","../node_modules/@remix-run/router/router.ts","../node_modules/memoize-one/dist/memoize-one.esm.js","../node_modules/intersection-observer/intersection-observer.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport type AgnosticPatchRoutesOnNavigationFunctionArgs<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = {\n  path: string;\n  matches: M[];\n  patch: (routeId: string | null, children: O[]) => void;\n};\n\nexport type AgnosticPatchRoutesOnNavigationFunction<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = (\n  opts: AgnosticPatchRoutesOnNavigationFunctionArgs<O, M>\n) => void | Promise<void>;\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  dataStrategy?: DataStrategyFunction;\n  patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      viewTransitionOpts?: ViewTransitionOpts;\n      flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches\n        .slice(0, idx + 1)\n        .every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(\n        (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n      );\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error: discoverResult.error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    abortFetcher(key);\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        abortFetcher(staleKey);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset,\n        });\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    if (!patchRoutesOnNavigationImpl) {\n      return { type: \"success\", matches };\n    }\n\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties\n            );\n          },\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search\n        ? path.search.replace(/^\\?/, \"?index&\")\n        : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string,\n  includeBoundary = false\n) {\n  let index = matches.findIndex((m) => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  initialHydration: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(state.errors)[0],\n      true\n    );\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      pendingActionResult[0]\n    );\n  }\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      initialHydration ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction shouldLoadRouteOnHydration(\n  route: AgnosticDataRouteObject,\n  loaderData: RouteData | null | undefined,\n  errors: RouteData | null | undefined\n) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  let childrenToPatch: AgnosticDataRouteObject[];\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(\n    (newRoute) =>\n      !childrenToPatch.some((existingRoute) =>\n        isSameRoute(newRoute, existingRoute)\n      )\n  );\n\n  let newRoutes = convertRoutesToDataRoutes(\n    uniqueChildren,\n    mapRouteProperties,\n    [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n    manifest\n  );\n\n  childrenToPatch.push(...newRoutes);\n}\n\nfunction isSameRoute(\n  newRoute: AgnosticRouteObject,\n  existingRoute: AgnosticRouteObject\n): boolean {\n  // Most optimal check is by id\n  if (\n    \"id\" in newRoute &&\n    \"id\" in existingRoute &&\n    newRoute.id === existingRoute.id\n  ) {\n    return true;\n  }\n\n  // Second is by pathing differences\n  if (\n    !(\n      newRoute.index === existingRoute.index &&\n      newRoute.path === existingRoute.path &&\n      newRoute.caseSensitive === existingRoute.caseSensitive\n    )\n  ) {\n    return false;\n  }\n\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if (\n    (!newRoute.children || newRoute.children.length === 0) &&\n    (!existingRoute.children || existingRoute.children.length === 0)\n  ) {\n    return true;\n  }\n\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children!.every((aChild, i) =>\n    existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n/**\n * Returns the embedding frame element, if any.\n * @param {!Document} doc\n * @return {!Element}\n */\nfunction getFrameElement(doc) {\n  try {\n    return doc.defaultView && doc.defaultView.frameElement || null;\n  } catch (e) {\n    // Ignore the error.\n    return null;\n  }\n}\n\n/**\n * A local reference to the root document.\n */\nvar document = (function(startDoc) {\n  var doc = startDoc;\n  var frame = getFrameElement(doc);\n  while (frame) {\n    doc = frame.ownerDocument;\n    frame = getFrameElement(doc);\n  }\n  return doc;\n})(window.document);\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n/**\n * The signal updater for cross-origin intersection. When not null, it means\n * that the polyfill is configured to work in a cross-origin mode.\n * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nvar crossOriginUpdater = null;\n\n/**\n * The current cross-origin intersection. Only used in the cross-origin mode.\n * @type {DOMRect|ClientRect}\n */\nvar crossOriginRect = null;\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = ensureDOMRect(entry.rootBounds);\n  this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\n  this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (\n    options.root &&\n    options.root.nodeType != 1 &&\n    options.root.nodeType != 9\n  ) {\n    throw new Error('root must be a Document or Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n\n  /** @private @const {!Array<!Document>} */\n  this._monitoringDocuments = [];\n  /** @private @const {!Array<function()>} */\n  this._monitoringUnsubscribes = [];\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Sets up the polyfill in the cross-origin mode. The result is the\n * updater function that accepts two arguments: `boundingClientRect` and\n * `intersectionRect` - just as these fields would be available to the\n * parent via `IntersectionObserverEntry`. This function should be called\n * each time the iframe receives intersection information from the parent\n * window, e.g. via messaging.\n * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nIntersectionObserver._setupCrossOriginUpdater = function() {\n  if (!crossOriginUpdater) {\n    /**\n     * @param {DOMRect|ClientRect} boundingClientRect\n     * @param {DOMRect|ClientRect} intersectionRect\n     */\n    crossOriginUpdater = function(boundingClientRect, intersectionRect) {\n      if (!boundingClientRect || !intersectionRect) {\n        crossOriginRect = getEmptyRect();\n      } else {\n        crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\n      }\n      registry.forEach(function(observer) {\n        observer._checkForIntersections();\n      });\n    };\n  }\n  return crossOriginUpdater;\n};\n\n\n/**\n * Resets the cross-origin mode.\n */\nIntersectionObserver._resetCrossOriginUpdater = function() {\n  crossOriginUpdater = null;\n  crossOriginRect = null;\n};\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections(target.ownerDocument);\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n        return item.element != target;\n      });\n  this._unmonitorIntersections(target.ownerDocument);\n  if (this._observationTargets.length == 0) {\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorAllIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\n  var win = doc.defaultView;\n  if (!win) {\n    // Already destroyed.\n    return;\n  }\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\n    // Already monitoring.\n    return;\n  }\n\n  // Private state for monitoring.\n  var callback = this._checkForIntersections;\n  var monitoringInterval = null;\n  var domObserver = null;\n\n  // If a poll interval is set, use polling instead of listening to\n  // resize and scroll events or DOM mutations.\n  if (this.POLL_INTERVAL) {\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n  } else {\n    addEvent(win, 'resize', callback, true);\n    addEvent(doc, 'scroll', callback, true);\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n      domObserver = new win.MutationObserver(callback);\n      domObserver.observe(doc, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    }\n  }\n\n  this._monitoringDocuments.push(doc);\n  this._monitoringUnsubscribes.push(function() {\n    // Get the window object again. When a friendly iframe is destroyed, it\n    // will be null.\n    var win = doc.defaultView;\n\n    if (win) {\n      if (monitoringInterval) {\n        win.clearInterval(monitoringInterval);\n      }\n      removeEvent(win, 'resize', callback, true);\n    }\n\n    removeEvent(doc, 'scroll', callback, true);\n    if (domObserver) {\n      domObserver.disconnect();\n    }\n  });\n\n  // Also monitor the parent.\n  var rootDoc =\n    (this.root && (this.root.ownerDocument || this.root)) || document;\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._monitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\n  var index = this._monitoringDocuments.indexOf(doc);\n  if (index == -1) {\n    return;\n  }\n\n  var rootDoc =\n    (this.root && (this.root.ownerDocument || this.root)) || document;\n\n  // Check if any dependent targets are still remaining.\n  var hasDependentTargets =\n      this._observationTargets.some(function(item) {\n        var itemDoc = item.element.ownerDocument;\n        // Target is in this context.\n        if (itemDoc == doc) {\n          return true;\n        }\n        // Target is nested in this context.\n        while (itemDoc && itemDoc != rootDoc) {\n          var frame = getFrameElement(itemDoc);\n          itemDoc = frame && frame.ownerDocument;\n          if (itemDoc == doc) {\n            return true;\n          }\n        }\n        return false;\n      });\n  if (hasDependentTargets) {\n    return;\n  }\n\n  // Unsubscribe.\n  var unsubscribe = this._monitoringUnsubscribes[index];\n  this._monitoringDocuments.splice(index, 1);\n  this._monitoringUnsubscribes.splice(index, 1);\n  unsubscribe();\n\n  // Also unmonitor the parent.\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._unmonitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\n  this._monitoringDocuments.length = 0;\n  this._monitoringUnsubscribes.length = 0;\n  for (var i = 0; i < unsubscribes.length; i++) {\n    unsubscribes[i]();\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  if (!this.root && crossOriginUpdater && !crossOriginRect) {\n    // Cross origin monitoring, but no initial data available yet.\n    return;\n  }\n\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n    var rootBounds = null;\n    if (!this._rootContainsTarget(target)) {\n      rootBounds = getEmptyRect();\n    } else if (!crossOriginUpdater || this.root) {\n      rootBounds = rootRect;\n    }\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootBounds,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} targetRect The bounding rect of the target.\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, targetRect, rootRect) {\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot && parent) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return null;\n\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\n      atRoot = true;\n      if (parent == this.root || parent == document) {\n        if (crossOriginUpdater && !this.root) {\n          if (!crossOriginRect ||\n              crossOriginRect.width == 0 && crossOriginRect.height == 0) {\n            // A 0-size cross-origin intersection means no-intersection.\n            parent = null;\n            parentRect = null;\n            intersectionRect = null;\n          } else {\n            parentRect = crossOriginRect;\n          }\n        } else {\n          parentRect = rootRect;\n        }\n      } else {\n        // Check if there's a frame that can be navigated to.\n        var frame = getParentNode(parent);\n        var frameRect = frame && getBoundingClientRect(frame);\n        var frameIntersect =\n            frame &&\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n        if (frameRect && frameIntersect) {\n          parent = frame;\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\n        } else {\n          parent = null;\n          intersectionRect = null;\n        }\n      }\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      var doc = parent.ownerDocument;\n      if (parent != doc.body &&\n          parent != doc.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n    }\n    if (!intersectionRect) break;\n    parent = parent && getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {ClientRect} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root && !isDoc(this.root)) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var doc = isDoc(this.root) ? this.root : document;\n    var html = doc.documentElement;\n    var body = doc.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {DOMRect|ClientRect} rect The rect object to expand.\n * @return {ClientRect} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  var rootDoc =\n    (this.root && (this.root.ownerDocument || this.root)) || document;\n  return (\n    containsDeep(rootDoc, target) &&\n    (!this.root || rootDoc == target.ownerDocument)\n  );\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detachEvent == 'function') {\n    node.detachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object|?ClientRect} The intersection rect or undefined if no\n *     intersection is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  } || null;\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {ClientRect} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n\n/**\n * Ensure that the result has all of the necessary fields of the DOMRect.\n * Specifically this ensures that `x` and `y` fields are set.\n *\n * @param {?DOMRect|?ClientRect} rect\n * @return {?DOMRect}\n */\nfunction ensureDOMRect(rect) {\n  // A `DOMRect` object has `x` and `y` fields.\n  if (!rect || 'x' in rect) {\n    return rect;\n  }\n  // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\n  // for internally calculated Rect objects. For the purposes of\n  // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\n  // for these fields.\n  return {\n    top: rect.top,\n    y: rect.top,\n    bottom: rect.bottom,\n    left: rect.left,\n    x: rect.left,\n    right: rect.right,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n\n/**\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\n * the local BCR space.\n * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\n * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\n * @return {ClientRect} The local root bounding rect for the parent's children.\n */\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\n  return {\n    top: top,\n    left: left,\n    height: parentIntersectionRect.height,\n    width: parentIntersectionRect.width,\n    bottom: top + parentIntersectionRect.height,\n    right: left + parentIntersectionRect.width\n  };\n}\n\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\n    // If this node is a document node, look for the embedding frame.\n    return getFrameElement(node);\n  }\n\n  // If the parent has element that is assigned through shadow root slot\n  if (parent && parent.assignedSlot) {\n    parent = parent.assignedSlot.parentNode\n  }\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  return parent;\n}\n\n/**\n * Returns true if `node` is a Document.\n * @param {!Node} node\n * @returns {boolean}\n */\nfunction isDoc(node) {\n  return node && node.nodeType === 9;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n"],"names":["Action","PopStateEventType","createBrowserHistory","options","getUrlBasedHistory","window","globalHistory","pathname","search","hash","location","createLocation","state","usr","key","to","createPath","invariant","value","message","Error","warning","cond","e","getHistoryState","index","idx","current","_extends","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getLocation","createHref","validateLocation","document","defaultView","v5Compat","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","replace","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","DOMException","name","assign","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","String","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","ErrorResponseImpl","constructor","status","statusText","data","internal","this","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","router","dataRoutes","dataStrategyImpl","dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","checkFogOfWar","active","m","lazy","loader","loaderData","errors","findIndex","shouldLoadRouteOnHydration","fogOfWar","pendingNavigationController","unblockBlockerHistoryUpdate","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","updateState","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","has","subscriber","viewTransitionOpts","flushSync","delete","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","priorPaths","get","currentLocation","nextLocation","toPaths","add","getSavedScrollPosition","async","startNavigation","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","submission","AbortController","pendingActionResult","request","createClientSideRequest","signal","pendingError","findNearestBoundary","type","actionResult","isFogOfWar","interruptActiveLoads","getSubmittingNavigation","discoverResult","discoverRoutes","shortCircuited","boundaryId","partialMatches","actionMatch","getTargetMatch","callDataStrategy","aborted","method","routeId","isRedirectResult","normalizeRedirectLocation","response","headers","startRedirectNavigation","isDeferredResult","isErrorResult","boundaryMatch","handleAction","getLoadingNavigation","updatedMatches","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","getActionDataForCommit","updates","rf","revalidatingFetcher","getLoadingFetcher","getUpdatedRevalidatingFetchers","abortFetcher","controller","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","processLoaderData","deferredData","subscribe","done","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","results","dataResults","callDataStrategyImpl","entries","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","Promise","all","resolve","acc","r","resolveNavigationDeferredResults","resolveFetcherDeferredResults","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref2","Array","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","handle","convertRouteMatchToUiMatch","y","isNonHMR","localManifest","patch","patchRoutesImpl","newMatches","newPartialMatches","initialize","nextHistoryUpdatePromise","then","_window","transitions","sessionPositions","sessionStorage","getItem","parse","isArray","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","viewTransition","fetch","requestMatches","detectAndHandle405Error","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","revalidate","count","dispose","clear","getBlocker","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","prependBasename","contextualMatches","activeRouteMatch","nakedIndex","hasNakedIndexQuery","URLSearchParams","indexValues","getAll","append","qs","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","isValidMethod","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","_ref3","convertFormDataToSearchParams","convertSearchParamsToFormData","getLoaderMatchesUntilBoundary","includeBoundary","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryMatches","actionStatus","statusCode","shouldSkipRevalidation","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","hasData","hasError","hydrate","currentPath","loaderMatch","arg","routeChoice","_childrenToPatch","childrenToPatch","newRoute","existingRoute","isSameRoute","aChild","_existingRoute$childr","bChild","_ref4","shouldLoad","requestContext","loadRouteDefinitionsPromises","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","loadLazyRouteModule","dsMatches","loadRoutePromise","handlerOverride","staticContext","onReject","runHandler","handler","reject","abortPromise","actualHandler","ctx","context","handlerPromise","race","handlerError","catch","callLoaderOrAction","dataStrategyResult","isResponse","contentType","isDataWithResponseInit","_result$init2","_result$init","_result$init3","_result$init4","_result$init5","_result$init6","deferred","resolveData","isDeferredData","Headers","trimmedMatches","normalizedLocation","protocol","isSameBasename","Request","processRouteLoaderData","skipLoaderErrorBubbling","foundError","loaderHeaders","newLoaderData","mergedLoaderData","hasOwnProperty","reverse","find","_temp5","errorMessage","isRevalidatingLoader","unwrap","unwrappedData","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","second","memoizeOne","resultFn","isEqual","cache","memoized","newArgs","_i","arguments","lastThis","lastArgs","lastResult","apply","IntersectionObserverEntry","prototype","defineProperty","intersectionRatio","doc","frame","getFrameElement","ownerDocument","registry","crossOriginUpdater","crossOriginRect","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","_setupCrossOriginUpdater","boundingClientRect","intersectionRect","convertFromParentRect","top","bottom","left","right","width","height","observer","_checkForIntersections","_resetCrossOriginUpdater","observe","target","_observationTargets","item","element","nodeType","_registerInstance","entry","_monitorIntersections","unobserve","_unmonitorIntersections","_unregisterInstance","disconnect","_unmonitorAllIntersections","takeRecords","records","_queuedEntries","_initThresholds","opt_threshold","threshold","t","_parseRootMargin","opt_rootMargin","margins","margin","parts","exec","parseFloat","unit","win","_monitoringDocuments","callback","monitoringInterval","domObserver","setInterval","addEvent","MutationObserver","attributes","childList","characterData","subtree","_monitoringUnsubscribes","clearInterval","removeEvent","rootDoc","root","hasDependentTargets","itemDoc","unsubscribe","splice","unsubscribes","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","rootBounds","newEntry","time","performance","now","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","parent","getParentNode","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","documentElement","overflow","computeRectIntersection","isDoc","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","frameElement","ensureDOMRect","targetArea","intersectionArea","toFixed","opt_options","timeout","timer","setTimeout","throttle","bind","rootMargin","node","event","opt_useCapture","attachEvent","detachEvent","rect1","rect2","max","min","el","err","x","parentBoundingRect","parentIntersectionRect","child","parentNode","assignedSlot","host"],"sourceRoot":""}