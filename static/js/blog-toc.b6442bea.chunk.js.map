{"version":3,"file":"static/js/blog-toc.b6442bea.chunk.js","mappings":"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","sources":["components/blog/TableOfContents.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nconst TableOfContents = ({ contentId, blogId, isSticky = false }) => {\n  const [headings, setHeadings] = useState([]);\n  const [activeId, setActiveId] = useState('');\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const observerRef = useRef(null);\n  const mutationObserverRef = useRef(null);\n\n  useEffect(() => {\n    // Function to extract headings from content\n    const extractHeadings = () => {\n      const contentElement = document.getElementById(contentId);\n      if (!contentElement) return;\n      \n      // Get all h2 and h3 elements from the content\n      const elements = contentElement.querySelectorAll('h2, h3');\n      \n      // Add ids to elements that don't have them based on blogId and text\n      elements.forEach((element, index) => {\n        if (!element.id) {\n          const slugifiedText = element.innerText\n            .toLowerCase()\n            .replace(/[^\\w ]+/g, '')\n            .replace(/ +/g, '-');\n          element.id = `${blogId}-heading-${slugifiedText}`;\n        }\n      });\n      \n      const headingElements = Array.from(elements).map(element => ({\n        id: element.id,\n        text: element.innerText,\n        level: element.tagName === 'H2' ? 2 : 3\n      }));\n      \n      setHeadings(headingElements);\n      \n      // Clean up any previous intersection observer\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n      \n      // Set up new IntersectionObserver to track active heading\n      observerRef.current = new IntersectionObserver(\n        entries => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting) {\n              setActiveId(entry.target.id);\n            }\n          });\n        },\n        { rootMargin: '0px 0px -80% 0px' }\n      );\n      \n      // Observe all heading elements\n      elements.forEach(element => observerRef.current.observe(element));\n    };\n\n    // Initial extraction of headings\n    extractHeadings();\n    \n    // Set up a MutationObserver to detect when content changes (like when blog content loads)\n    if (mutationObserverRef.current) {\n      mutationObserverRef.current.disconnect();\n    }\n    \n    const contentElement = document.getElementById(contentId);\n    if (contentElement) {\n      mutationObserverRef.current = new MutationObserver((mutations) => {\n        // If significant changes to content, re-extract headings\n        const shouldUpdate = mutations.some(mutation => \n          mutation.type === 'childList' && \n          (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)\n        );\n        \n        if (shouldUpdate) {\n          // Small timeout to ensure DOM is fully updated\n          setTimeout(extractHeadings, 100);\n        }\n      });\n      \n      // Start observing content changes\n      mutationObserverRef.current.observe(contentElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n    \n    return () => {\n      // Clean up observers when component unmounts or contentId/blogId changes\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n      if (mutationObserverRef.current) {\n        mutationObserverRef.current.disconnect();\n      }\n    };\n  }, [contentId, blogId]);\n\n  const scrollToHeading = (id) => {\n    const element = document.getElementById(id);\n    if (element) {\n      window.scrollTo({\n        top: element.offsetTop - 100,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  const toggleCollapse = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  if (headings.length === 0) return null;\n\n  return (\n    <div className={`toc-container bg-white p-4 rounded-lg shadow-md mb-6 ${isSticky ? 'sticky top-24' : ''}`}>\n      <div className=\"flex justify-between items-center cursor-pointer\" onClick={toggleCollapse}>\n        <h2 className=\"text-xl font-bold text-gray-800\">Table of Contents</h2>\n        <button \n          aria-label={isCollapsed ? \"Expand\" : \"Collapse\"} \n          className=\"text-gray-600 hover:text-blue-600 focus:outline-none\"\n        >\n          <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            className={`h-5 w-5 transform transition-transform ${isCollapsed ? 'rotate-180' : ''}`}\n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={isCollapsed ? \"M19 9l-7 7-7-7\" : \"M5 15l7-7 7 7\"} />\n          </svg>\n        </button>\n      </div>\n      \n      {!isCollapsed && (\n        <ul className=\"space-y-2 mt-3\">\n          {headings.map((heading) => (\n            <li \n              key={heading.id}\n              className={`toc-item ${heading.level === 3 ? 'ml-4' : ''}`}\n            >\n              <a\n                href={`#${heading.id}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  scrollToHeading(heading.id);\n                }}\n                className={`block text-${heading.level === 2 ? 'md' : 'sm'} ${\n                  activeId === heading.id\n                    ? 'text-blue-600 font-semibold'\n                    : 'text-gray-700 hover:text-blue-600'\n                } transition-colors duration-200`}\n              >\n                {heading.text}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default TableOfContents;"],"names":["_ref","contentId","blogId","isSticky","headings","setHeadings","useState","activeId","setActiveId","isCollapsed","setIsCollapsed","observerRef","useRef","mutationObserverRef","useEffect","extractHeadings","contentElement","document","getElementById","elements","querySelectorAll","forEach","element","index","id","slugifiedText","innerText","toLowerCase","replace","concat","headingElements","Array","from","map","text","level","tagName","current","disconnect","IntersectionObserver","entries","entry","isIntersecting","target","rootMargin","observe","MutationObserver","mutations","some","mutation","type","addedNodes","length","removedNodes","setTimeout","childList","subtree","_jsxs","className","children","onClick","toggleCollapse","_jsx","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","heading","href","e","preventDefault","window","scrollTo","top","offsetTop","behavior","scrollToHeading"],"sourceRoot":""}