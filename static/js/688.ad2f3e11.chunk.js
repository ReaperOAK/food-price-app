"use strict";(self.webpackChunkfood_price_app=self.webpackChunkfood_price_app||[]).push([[688],{688:(t,e,a)=>{a.d(e,{A:()=>n});var s=a(9379);const n=class{constructor(){this.baseURL="/php/seo_api.php",this.defaultParams=new URLSearchParams}async makeRequest(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};try{const n=new URL(this.baseURL,window.location.origin);n.searchParams.set("action",t),Object.keys(s).forEach((t=>{n.searchParams.set(t,s[t])}));const i={method:e,headers:{"Content-Type":"application/json"}};a&&"GET"!==e&&(i.body=JSON.stringify(a));const r=await fetch(n.toString(),i);if(!r.ok)throw new Error("HTTP error! status: ".concat(r.status));const o=await r.json();if(!1===o.success)throw new Error(o.message||"API request failed");return o}catch(n){throw n}}async processCSVReports(){return await this.makeRequest("process","POST")}async getStatus(){return await this.makeRequest("status")}async getDashboardData(){return await this.makeRequest("dashboard")}async getOptimizations(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return await this.makeRequest("optimizations","GET",null,{limit:t,offset:e})}async uploadCSVFile(t,e){const a=new FormData;a.append("csvFile",t),a.append("fileType",e);try{const t=new URL(this.baseURL,window.location.origin);t.searchParams.set("action","upload");const e=await fetch(t.toString(),{method:"POST",body:a});if(!e.ok)throw new Error("HTTP error! status: ".concat(e.status));const s=await e.json();if(!1===s.success)throw new Error(s.message||"File upload failed");return s}catch(s){throw s}}async getInsights(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"7d";return await this.makeRequest("insights","GET",null,{timeframe:t})}async updateSettings(t){return await this.makeRequest("settings","POST",t)}async exportData(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"json",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return await this.makeRequest("export","GET",null,(0,s.A)({format:t},e))}async getKeywordPerformance(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:50,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"clicks",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"DESC";return await this.makeRequest("keywords","GET",null,{limit:t,sort:e,order:a})}async getPagePerformance(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:50,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"clicks",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"DESC";return await this.makeRequest("pages","GET",null,{limit:t,sort:e,order:a})}async getContentGaps(){return await this.makeRequest("content_gaps")}async getInternationalOpportunities(){return await this.makeRequest("international")}async getDevicePerformance(){return await this.makeRequest("devices")}async startMonitoring(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;return await this.makeRequest("start_monitoring","POST",{interval:t})}async stopMonitoring(){return await this.makeRequest("stop_monitoring","POST")}async getProcessingLogs(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100;return await this.makeRequest("logs","GET",null,{limit:t})}async forceProcessCSV(){return await this.makeRequest("force_process","POST")}}}}]);