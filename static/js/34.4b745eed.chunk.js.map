{"version":3,"file":"static/js/34.4b745eed.chunk.js","mappings":"2MAUO,MAiMMA,EAA4B,SAACC,GACxC,IAAKA,EAAM,MAAO,QAElB,MAAMC,EAAgBD,EAAKE,cAAcC,OAGnCC,EAAmB,CAEvB,MAAS,cACT,YAAa,cACb,IAAO,cACP,YAAa,cACb,OAAU,SACV,OAAU,SACV,UAAa,wBACb,UAAa,wBACb,IAAO,wBACP,UAAa,YACb,IAAO,YACP,QAAW,UACX,OAAU,UACV,QAAW,UACX,SAAY,UACZ,KAAQ,OACR,MAAS,OACT,UAAa,YACb,QAAW,YACX,OAAU,SACV,YAAa,SACb,QAAW,UACX,OAAU,SACV,OAAU,SACV,OAAU,SACV,MAAS,QACT,OAAU,SACV,cAAiB,gBACjB,MAAS,gBACT,WAAc,aACd,MAAS,QACT,OAAU,QACV,QAAW,UACX,SAAY,WACZ,cAAe,WACf,QAAW,qBACX,SAAY,qBACZ,MAAS,QACT,gBAAiB,gBAGjB,aAAc,aACd,UAAa,aACb,GAAM,aACN,UAAa,YACb,GAAM,YACN,UAAa,YACb,GAAM,YACN,YAAe,cACf,GAAM,cACN,iBAAkB,iBAClB,GAAM,iBACN,gBAAiB,gBACjB,GAAM,gBACN,OAAU,SACV,GAAM,SACN,QAAW,UACX,GAAM,UACN,QAAW,UACX,GAAM,UACN,OAAU,SACV,GAAM,SACN,UAAa,YACb,GAAM,YACN,MAAS,QACT,GAAM,QACN,cAAe,cACf,GAAM,cACN,GAAM,iBACN,iBAAkB,kBAIpB,OAAIA,EAAiBH,GACZG,EAAiBH,GAInBD,EAAKK,MAAM,KACfC,KAAIC,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGR,gBACzDS,KAAK,IACV,EAOaC,EAAmBC,IAC9B,IAAKA,EAAU,MAAO,GA+BtB,MA7BoB,CAClB,MAAS,QACT,OAAU,cACV,UAAa,YACb,UAAa,YACb,UAAa,YACb,QAAW,aACX,QAAW,cACX,KAAQ,cACR,UAAa,UACb,OAAU,YACV,QAAW,gBACX,OAAU,gBACV,OAAU,cACV,OAAU,iBACV,MAAS,cACT,OAAU,iBACV,cAAiB,iBACjB,MAAS,iBACT,WAAc,aACd,MAAS,SACT,OAAU,SACV,QAAW,UACX,SAAY,aACZ,SAAY,UACZ,QAAW,UACX,MAAS,iBAGQA,EAASX,gBAAkB,EAAE,E,aC/TlD,MA2KA,EA3KuBY,KACrB,MAAM,KAAEC,IAASC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,OACVC,IAAWC,EAAAA,EAAAA,WAAS,IACpBC,IAASD,EAAAA,EAAAA,UAAS,OAClBE,EAAWC,IAAgBH,EAAAA,EAAAA,UAAS,OACpCI,EAAeC,IAAoBL,EAAAA,EAAAA,UAAS,KAC5CM,EAAcC,IAAmBP,EAAAA,EAAAA,UAAS,KAGjDQ,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAWd,EAAKe,QAAQ,YAAa,IACrCjB,EAAWgB,EAASxB,MAAM,KAAKC,KAAIC,GACvCA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,KAC1CC,KAAK,KAGDoB,EAAgBhC,EAA0Bc,EAAU,QACpDmB,EAAYpB,EAAgBC,IAAa,GAE/CU,EAAa,CACXV,SAAUkB,EACVC,YACAH,WACAI,aAAa,IAAIC,MAAOC,mBAAmB,QAAS,CAClDC,KAAM,UACNC,MAAO,OACPC,IAAK,cAKT,MAAMC,EAAQC,YAAW,KACvBC,OAAOC,SAASC,KAAI,eAAAC,OAAkB7B,EAAI,QAAO,GAChD,KAEH,MAAO,IAAM8B,aAAaN,EAAM,GAC/B,CAACxB,IAGJ,MA4CM+B,EA5CcC,MAClB,IAAKzB,EAAW,MAAO,CAAC,EAExB,MAAM,SAAET,EAAQ,UAAEmB,EAAS,SAAEH,EAAQ,YAAEI,GAAgBX,EAEjD0B,EAAK,eAAAJ,OAAkB/B,GAAQ+B,OAAGZ,EAAS,KAAAY,OAAQZ,GAAc,GAAE,0CACnEiB,EAAW,6BAAAL,OAAgC/B,GAAQ+B,OAAGZ,EAAS,KAAAY,OAAQZ,GAAc,GAAE,gEAAAY,OAA+DX,EAAW,2CACjKiB,EAAY,sCAAAN,OAAyCf,EAAQ,cAkCnE,MAAO,CAAEmB,QAAOC,cAAaC,eAAcC,OA/B5B,CACb,WAAY,qBACZ,QAAS,UACT,KAAQH,EACR,YAAeC,EACf,IAAOC,EACP,WAAc,CACZ,QAAS,UACT,SAAW,eAADN,OAAiB/B,EAAQ,YAAA+B,OAAWX,EAAW,KACzD,eAAiB,IAAIC,MAAOkB,cAC5B,cAAgB,IAAIlB,MAAOkB,cAC3B,UAAa,CACX,QAAS,eACT,KAAQ,oBACR,KAAQ,CACN,QAAS,cACT,IAAO,0CAGX,MAAQ,yDAADR,OAA2Df,EAAQ,QAC1E,OAAU,CACR,QAAS,eACT,KAAQ,qBAEV,UAAa,CACX,QAAS,yBACT,YAAe,CAAC,mBAAoB,yBAKS,EAGzCkB,GAEZ,OAAI5B,IAAYE,GAEZgC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGjC,IAAakC,EAAAA,EAAAA,KAACC,EAAAA,GAAMC,EAAAA,EAAAA,GAAA,GAAKZ,KAC1BO,EAAAA,EAAAA,MAAA,OAAKM,UAAU,wCAAuCJ,SAAA,EACpDC,EAAAA,EAAAA,KAACI,EAAAA,QAAM,CACLpC,cAAeA,EACfC,iBAAkBA,EAClBE,gBAAiBA,EACjBD,aAAcA,KAEhB2B,EAAAA,EAAAA,MAAA,OAAKM,UAAU,4EAA2EJ,SAAA,EACxFC,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mFAEdrC,IACC+B,EAAAA,EAAAA,MAAA,OAAKM,UAAU,0CAAyCJ,SAAA,EACtDF,EAAAA,EAAAA,MAAA,MAAIM,UAAU,0CAAyCJ,SAAA,CAAC,eACzCjC,EAAUT,SAAUS,EAAUU,UAAS,KAAAY,OAAQtB,EAAUU,WAAc,OAEtFqB,EAAAA,EAAAA,MAAA,KAAGM,UAAU,OAAMJ,SAAA,CAAC,cAAYjC,EAAUW,gBAC1CuB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,OAAMJ,SAAC,6DACpBC,EAAAA,EAAAA,KAAA,OAAKG,UAAU,wBAAuBJ,UACpCF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,oDAAkDjC,EAAUT,SAAS,gFAKhF2C,EAAAA,EAAAA,KAACK,EAAAA,QAAM,UAMXxC,GAEAgC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLT,MAAM,wCACNC,YAAY,iIACZC,aAAa,2CAEfG,EAAAA,EAAAA,MAAA,OAAKM,UAAU,wCAAuCJ,SAAA,EACpDC,EAAAA,EAAAA,KAACI,EAAAA,QAAM,CACLpC,cAAeA,EACfC,iBAAkBA,EAClBE,gBAAiBA,EACjBD,aAAcA,KAEhB8B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kCAAiCJ,UAC9CF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kEAAiEJ,SAAA,EAC9EF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,4BAA0BlC,MAC7BmC,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAM7C,EAAS,eACxB0C,UAAU,4EAA2EJ,SACtF,8BAKLC,EAAAA,EAAAA,KAACK,EAAAA,QAAM,WAObR,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGjC,IAAakC,EAAAA,EAAAA,KAACC,EAAAA,GAAMC,EAAAA,EAAAA,GAAA,GAAKZ,KAC1BO,EAAAA,EAAAA,MAAA,OAAKM,UAAU,wCAAuCJ,SAAA,EACpDC,EAAAA,EAAAA,KAACI,EAAAA,QAAM,CACLpC,cAAeA,EACfC,iBAAkBA,EAClBE,gBAAiBA,EACjBD,aAAcA,KAEhB8B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mEAAkEJ,UAC/EC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mCAELC,EAAAA,EAAAA,KAACK,EAAAA,QAAM,SAER,C","sources":["utils/seoHelpers.js","components/WebStoryViewer.js"],"sourcesContent":["/**\n * SEO utility functions for the Egg Price App\n * These functions help optimize content for search engines\n */\n\n/**\n * Creates a URL-friendly slug from a string\n * @param {string} text - The text to slugify\n * @return {string} - URL-friendly slug\n */\nexport const createSlug = (text) => {\n  return text\n    .toLowerCase()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen\n    .trim();\n};\n\n/**\n * Formats a city or state name for display with proper capitalization\n * @param {string} name - The name to format\n * @return {string} - Properly formatted name\n */\nexport const formatLocationName = (name) => {\n  if (!name) return 'India';\n  \n  // Special case formatting for common locations\n  const specialCases = {\n    'delhi': 'Delhi (NCR)',\n    'mumbai': 'Mumbai',\n    'bangalore': 'Bengaluru (Bangalore)',\n    'bengaluru': 'Bengaluru (Bangalore)',\n    'hyderabad': 'Hyderabad',\n    'chennai': 'Chennai',\n    'kolkata': 'Kolkata',\n    'pune': 'Pune',\n    'ahmedabad': 'Ahmedabad',\n    'jaipur': 'Jaipur',\n    'tamil nadu': 'Tamil Nadu',\n    'karnataka': 'Karnataka',\n    'telangana': 'Telangana',\n    'maharashtra': 'Maharashtra',\n    'barwala': 'Barwala',\n    'namakkal': 'Namakkal',\n  };\n  \n  const lowercaseName = name.toLowerCase();\n  return specialCases[lowercaseName] || \n         name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n};\n\n/**\n * Creates a formatted date string for SEO purposes\n * @param {Date} date - Date object (defaults to current date)\n * @param {string} format - Format type: 'full', 'short', 'iso'\n * @return {string} - Formatted date string\n */\nexport const formatDate = (date = new Date(), format = 'full') => {\n  const options = {\n    full: { \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric',\n      weekday: 'long'\n    },\n    short: { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric'\n    },\n    time: {\n      hour: '2-digit',\n      minute: '2-digit',\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric',\n      hour12: true\n    }\n  };\n  \n  if (format === 'iso') {\n    return date.toISOString();\n  } else if (format === 'isoDate') {\n    return date.toISOString().split('T')[0];\n  } else {\n    return date.toLocaleDateString('en-IN', options[format] || options.short);\n  }\n};\n\n/**\n * Generates structured data for a specific location's egg rates\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city' or 'state'\n * @param {Array} eggRates - Array of egg rate data\n * @param {string} canonicalUrl - The canonical URL\n * @return {Object} - Structured data object\n */\nexport const generateLocationSchema = (locationName, locationType, eggRates, canonicalUrl) => {\n  const today = formatDate(new Date(), 'isoDate');\n  const tomorrow = formatDate(new Date(new Date().setDate(new Date().getDate() + 1)), 'isoDate');\n  const formattedName = formatLocationName(locationName);\n  \n  if (locationType === 'city' && eggRates && eggRates.length > 0) {\n    const cityRate = eggRates[0]?.rate || \"0.00\";\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Product\",\n      \"name\": `Eggs in ${formattedName}`,\n      \"description\": `Current egg rates and prices in ${formattedName}, updated on ${today}. Check wholesale and retail prices with daily updates.`,\n      \"category\": \"Food & Groceries > Dairy & Eggs > Eggs\",\n      \"sku\": `EGG-${formattedName.toUpperCase().replace(/\\s+/g, '-')}-${today}`,\n      \"image\": [\n        \"https://todayeggrates.com/eggpic.png\",\n        \"https://todayeggrates.com/egg-tray.jpg\"\n      ],\n      \"offers\": {\n        \"@type\": \"AggregateOffer\",\n        \"lowPrice\": (cityRate * 0.9).toFixed(2),\n        \"highPrice\": (cityRate * 1.1).toFixed(2),\n        \"priceCurrency\": \"INR\",\n        \"priceValidUntil\": tomorrow,\n        \"availability\": \"https://schema.org/InStock\",\n        \"url\": canonicalUrl,\n        \"offerCount\": \"20+\"\n      }\n    };\n  } else if (locationType === 'state') {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"ItemList\",\n      \"name\": `Egg Rates in ${formattedName} State`,\n      \"description\": `Complete list of all cities egg rates in ${formattedName} state, updated on ${today}`,\n      \"url\": canonicalUrl,\n      \"numberOfItems\": eggRates?.length || 0,\n      \"dateModified\": new Date().toISOString()\n    };\n  }\n  \n  return null;\n};\n\n/**\n * Optimizes title tags for SEO\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'country'\n * @return {string} - SEO optimized title\n */\nexport const generateSeoTitle = (locationName, locationType) => {\n  const formattedName = formatLocationName(locationName);\n  const date = formatDate(new Date(), 'short');\n  \n  if (locationType === 'city') {\n    return `Egg Rates in ${formattedName} Today (${date}) - Latest Wholesale & Retail Egg Prices | TodayEggRates.com`;\n  } else if (locationType === 'state') {\n    return `${formattedName} Egg Rate Today - Updated Egg Prices Across All ${formattedName} Cities | TodayEggRates.com`;\n  } else {\n    return `Today's Egg Rates - Latest NECC Egg Prices in India (${date}) | TodayEggRates.com`;\n  }\n};\n\n/**\n * Optimizes meta descriptions for SEO\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'country'\n * @param {Array} eggRates - Optional array of egg rate data\n * @return {string} - SEO optimized meta description\n */\nexport const generateSeoDescription = (locationName, locationType, eggRates = []) => {\n  const formattedName = formatLocationName(locationName);\n  const date = formatDate(new Date(), 'short');\n  \n  if (locationType === 'city') {\n    const cityRate = eggRates && eggRates.length > 0 ? `₹${eggRates[0]?.rate} per 100 eggs` : '';\n    return `Check today's egg rates in ${formattedName} (${date}). ${cityRate ? `Current price: ${cityRate}. ` : ''}Updated daily egg prices for ${formattedName} wholesale and retail markets. Compare current NECC egg rates with historical trends. Official verified poultry market prices.`;\n  } else if (locationType === 'state') {\n    return `Find latest egg rates across all cities in ${formattedName} state. Daily updated egg prices for ${formattedName} with city-wise price list, historical data, price comparisons and market trends. Official NECC egg rates from poultry farms.`;\n  } else {\n    return `Today's Egg Rates in India - Get the latest egg prices across all cities and states. Updated daily (${date}) NECC egg rates for wholesale and retail markets. Track egg price fluctuations, find lowest egg prices near you, and follow poultry market trends.`;\n  }\n};\n\n/**\n * List of common keywords for egg rates\n * @return {Array} - Array of common egg rate keywords\n */\nexport const getCommonEggKeywords = () => {\n  return [\n    'egg rates', 'egg price', 'egg prices', 'eggs rate', 'eggs price',\n    'daily egg rate', 'today egg price', 'current egg rate',\n    'egg price today', 'egg rate today', \"today's egg rate\",\n    'fresh egg price', 'wholesale egg price', 'retail egg price',\n    'necc egg rates', 'egg market price', 'egg mandi rate',\n    'egg price chart', 'egg price list', 'egg price comparison',\n    'poultry farm egg price', 'farm fresh egg rate', 'egg tray price',\n    'egg per piece price', 'egg peti rate', 'lowest egg rates'\n  ];\n};\n\n/**\n * Enhanced location name formatter with more city-state relations\n * and common search variations for better keyword targeting\n */\nexport const enhancedLocationFormatter = (name, locationType = 'city') => {\n  if (!name) return 'India';\n  \n  const lowercaseName = name.toLowerCase().trim();\n  \n  // Map of location variants to standardized names (handles common misspellings and variants)\n  const locationVariants = {\n    // City variants\n    'delhi': 'Delhi (NCR)',\n    'new delhi': 'Delhi (NCR)',\n    'ncr': 'Delhi (NCR)',\n    'delhi ncr': 'Delhi (NCR)',\n    'mumbai': 'Mumbai',\n    'bombay': 'Mumbai',\n    'bangalore': 'Bengaluru (Bangalore)',\n    'bengaluru': 'Bengaluru (Bangalore)',\n    'blr': 'Bengaluru (Bangalore)',\n    'hyderabad': 'Hyderabad',\n    'hyd': 'Hyderabad',\n    'chennai': 'Chennai',\n    'madras': 'Chennai',\n    'kolkata': 'Kolkata',\n    'calcutta': 'Kolkata',\n    'pune': 'Pune',\n    'poona': 'Pune',\n    'ahmedabad': 'Ahmedabad',\n    'amdavad': 'Ahmedabad',\n    'jaipur': 'Jaipur',\n    'pink city': 'Jaipur',\n    'lucknow': 'Lucknow',\n    'kanpur': 'Kanpur',\n    'nagpur': 'Nagpur',\n    'indore': 'Indore',\n    'thane': 'Thane',\n    'bhopal': 'Bhopal',\n    'visakhapatnam': 'Visakhapatnam',\n    'vizag': 'Visakhapatnam',\n    'coimbatore': 'Coimbatore',\n    'kochi': 'Kochi',\n    'cochin': 'Kochi',\n    'barwala': 'Barwala',\n    'namakkal': 'Namakkal',\n    'namakkal dt': 'Namakkal',\n    'gurgaon': 'Gurugram (Gurgaon)',\n    'gurugram': 'Gurugram (Gurgaon)',\n    'noida': 'Noida',\n    'greater noida': 'Greater Noida',\n    \n    // State variants\n    'tamil nadu': 'Tamil Nadu',\n    'tamilnadu': 'Tamil Nadu',\n    'tn': 'Tamil Nadu',\n    'karnataka': 'Karnataka',\n    'ka': 'Karnataka',\n    'telangana': 'Telangana',\n    'ts': 'Telangana',\n    'maharashtra': 'Maharashtra',\n    'mh': 'Maharashtra',\n    'andhra pradesh': 'Andhra Pradesh',\n    'ap': 'Andhra Pradesh',\n    'uttar pradesh': 'Uttar Pradesh',\n    'up': 'Uttar Pradesh',\n    'kerala': 'Kerala',\n    'kl': 'Kerala',\n    'gujarat': 'Gujarat',\n    'gj': 'Gujarat',\n    'haryana': 'Haryana',\n    'hr': 'Haryana',\n    'punjab': 'Punjab',\n    'pb': 'Punjab',\n    'rajasthan': 'Rajasthan',\n    'rj': 'Rajasthan',\n    'bihar': 'Bihar',\n    'br': 'Bihar',\n    'west bengal': 'West Bengal',\n    'wb': 'West Bengal',\n    'mp': 'Madhya Pradesh',\n    'madhya pradesh': 'Madhya Pradesh'\n  };\n  \n  // Return the standardized name if it exists in our variants mapping\n  if (locationVariants[lowercaseName]) {\n    return locationVariants[lowercaseName];\n  }\n  \n  // Otherwise, properly capitalize the name\n  return name.split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n};\n\n/**\n * Gets the state for a given city, useful for adding context to city pages\n * @param {string} cityName - Name of the city\n * @return {string} - Corresponding state name or empty string\n */\nexport const getStateForCity = (cityName) => {\n  if (!cityName) return '';\n  \n  const cityToState = {\n    'delhi': 'Delhi',\n    'mumbai': 'Maharashtra',\n    'bengaluru': 'Karnataka',\n    'bangalore': 'Karnataka',\n    'hyderabad': 'Telangana',\n    'chennai': 'Tamil Nadu',\n    'kolkata': 'West Bengal',\n    'pune': 'Maharashtra',\n    'ahmedabad': 'Gujarat',\n    'jaipur': 'Rajasthan',\n    'lucknow': 'Uttar Pradesh',\n    'kanpur': 'Uttar Pradesh',\n    'nagpur': 'Maharashtra',\n    'indore': 'Madhya Pradesh',\n    'thane': 'Maharashtra',\n    'bhopal': 'Madhya Pradesh',\n    'visakhapatnam': 'Andhra Pradesh',\n    'vizag': 'Andhra Pradesh',\n    'coimbatore': 'Tamil Nadu',\n    'kochi': 'Kerala',\n    'cochin': 'Kerala',\n    'barwala': 'Haryana',\n    'namakkal': 'Tamil Nadu',\n    'gurugram': 'Haryana',\n    'gurgaon': 'Haryana',\n    'noida': 'Uttar Pradesh'\n  };\n  \n  return cityToState[cityName.toLowerCase()] || '';\n};\n\n/**\n * Generate advanced schema markup for a location with voice search optimization\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city' or 'state'\n * @param {Array} eggRates - Array of egg rate data\n * @param {string} canonicalUrl - The canonical URL\n * @return {Object} - Enhanced structured data object\n */\nexport const generateAdvancedSchema = (locationName, locationType, eggRates = [], canonicalUrl) => {\n  const today = formatDate(new Date(), 'isoDate');\n  const tomorrow = formatDate(new Date(new Date().setDate(new Date().getDate() + 1)), 'isoDate');\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const stateName = locationType === 'city' ? getStateForCity(locationName) : formattedName;\n  \n  if (locationType === 'city' && eggRates.length > 0) {\n    const cityRate = eggRates[0]?.rate || \"0.00\";\n    const retailRate = (cityRate * 1.1).toFixed(2);\n    const wholesaleRate = (cityRate * 0.9).toFixed(2);\n    \n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Product\",\n      \"name\": `Eggs in ${formattedName}`,\n      \"description\": `Current egg rates and prices in ${formattedName}, ${stateName}. Updated on ${today} with official NECC rates. Wholesale: ₹${wholesaleRate}, Retail: ₹${retailRate} per 100 eggs.`,\n      \"category\": \"Food & Groceries > Dairy & Eggs > Eggs\",\n      \"sku\": `EGG-${formattedName.toUpperCase().replace(/\\s+/g, '-')}-${today}`,\n      \"image\": [\n        \"https://todayeggrates.com/eggpic.png\",\n        \"https://todayeggrates.com/egg-tray.jpg\"\n      ],\n      \"brand\": {\n        \"@type\": \"Brand\",\n        \"name\": \"Farm Fresh Eggs\"\n      },\n      \"offers\": {\n        \"@type\": \"AggregateOffer\",\n        \"lowPrice\": wholesaleRate,\n        \"highPrice\": retailRate,\n        \"priceCurrency\": \"INR\",\n        \"priceValidUntil\": tomorrow,\n        \"availability\": \"https://schema.org/InStock\",\n        \"url\": canonicalUrl,\n        \"itemCondition\": \"https://schema.org/NewCondition\",\n        \"offerCount\": \"20+\",\n        \"seller\": {\n          \"@type\": \"Organization\",\n          \"name\": \"Today Egg Rates\"\n        },\n        \"areaServed\": {\n          \"@type\": \"City\",\n          \"name\": formattedName,\n          \"containedInPlace\": {\n            \"@type\": \"State\",\n            \"name\": stateName\n          }\n        }\n      },\n      \"aggregateRating\": {\n        \"@type\": \"AggregateRating\",\n        \"ratingValue\": \"4.7\",\n        \"reviewCount\": \"125\",\n        \"bestRating\": \"5\",\n        \"worstRating\": \"1\"\n      },\n      \"review\": [\n        {\n          \"@type\": \"Review\",\n          \"reviewRating\": {\n            \"@type\": \"Rating\",\n            \"ratingValue\": \"4.8\",\n            \"bestRating\": \"5\"\n          },\n          \"author\": {\n            \"@type\": \"Person\",\n            \"name\": \"Egg Market Analyst\"\n          },\n          \"datePublished\": today,\n          \"reviewBody\": `Egg prices in ${formattedName} show healthy market conditions with good quality products available at competitive rates.`\n        }\n      ],\n      \"additionalProperty\": [\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"Origin\",\n          \"value\": \"India\"\n        },\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"Size\",\n          \"value\": \"Medium to Large\"\n        },\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"PriceType\",\n          \"value\": \"Per 100 eggs\"\n        },\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"Location\",\n          \"value\": `${formattedName}, ${stateName}, India`\n        },\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"LastUpdated\",\n          \"value\": new Date().toISOString()\n        }\n      ],\n      \"mainEntityOfPage\": canonicalUrl,\n      \"speakable\": {\n        \"@type\": \"SpeakableSpecification\",\n        \"cssSelector\": [\"h1\", \".egg-rates-summary\", \".current-price\"]\n      }\n    };\n  } else if (locationType === 'state') {\n    // Enhanced state schema\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"ItemList\",\n      \"name\": `Egg Rates in ${formattedName} State`,\n      \"description\": `Complete list of all cities egg rates in ${formattedName} state, updated on ${today}. Find the cheapest egg prices in your city with daily updates from NECC.`,\n      \"url\": canonicalUrl,\n      \"numberOfItems\": eggRates?.length || 0,\n      \"dateModified\": new Date().toISOString(),\n      \"itemListElement\": eggRates.slice(0, Math.min(eggRates.length, 25)).map((rate, index) => ({\n        \"@type\": \"ListItem\",\n        \"position\": index + 1,\n        \"item\": {\n          \"@type\": \"Product\",\n          \"name\": `Eggs in ${rate.city || 'Local Market'}`,\n          \"description\": `Daily updated egg prices in ${rate.city || 'Local Market'}, ${formattedName}`,\n          \"url\": `https://todayeggrates.com/${(rate.city || 'local-market').toLowerCase().replace(/\\s+/g, '-')}-egg-rate/`,\n          \"offers\": {\n            \"@type\": \"Offer\",\n            \"price\": rate.rate || \"0.00\",\n            \"priceCurrency\": \"INR\",\n            \"availability\": \"https://schema.org/InStock\",\n            \"priceValidUntil\": tomorrow\n          }\n        }\n      })),\n      \"speakable\": {\n        \"@type\": \"SpeakableSpecification\",\n        \"cssSelector\": [\"h1\", \".state-summary\", \".price-comparison\"]\n      }\n    };\n  } else {\n    // National/homepage schema\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Dataset\",\n      \"name\": \"India Egg Rates Dataset\",\n      \"description\": `Daily updated egg rates across all states and cities in India. Last updated: ${today}. Comprehensive collection of egg prices from all major markets with price trends and analysis.`,\n      \"url\": \"https://todayeggrates.com\",\n      \"keywords\": [\"egg rates\", \"egg prices\", \"India\", \"poultry\", \"wholesale egg\", \"retail egg\", \"NECC rates\", \"egg market data\", \"farm fresh eggs\", \"egg price comparison\"],\n      \"isAccessibleForFree\": true,\n      \"creator\": {\n        \"@type\": \"Organization\",\n        \"name\": \"TodayEggRates.com\",\n        \"url\": \"https://todayeggrates.com\"\n      },\n      \"dateModified\": new Date().toISOString(),\n      \"datePublished\": today,\n      \"version\": today.replace(/-/g, ''),\n      \"temporalCoverage\": `${new Date().getFullYear() - 1}/${new Date().getFullYear()}`,\n      \"spatialCoverage\": {\n        \"@type\": \"Place\",\n        \"geo\": {\n          \"@type\": \"GeoShape\",\n          \"name\": \"India\",\n          \"box\": \"8.4 68.7 37.6 97.25\"\n        }\n      },\n      \"variableMeasured\": [\n        \"Egg Price (INR)\",\n        \"Daily Price Change\",\n        \"Weekly Price Trend\",\n        \"Monthly Price Comparison\"\n      ],\n      \"includedInDataCatalog\": {\n        \"@type\": \"DataCatalog\",\n        \"name\": \"India Agricultural Price Database\"\n      },\n      \"distribution\": [\n        {\n          \"@type\": \"DataDownload\",\n          \"encodingFormat\": \"CSV\",\n          \"contentUrl\": \"https://todayeggrates.com/data/egg-prices-history.csv\"\n        }\n      ],\n      \"speakable\": {\n        \"@type\": \"SpeakableSpecification\",\n        \"cssSelector\": [\"h1\", \".home-summary\", \".top-rates\"]\n      }\n    };\n  }\n};\n\n/**\n * Generate rich breadcrumb schema for better navigation signals to search engines\n * @param {string} locationName - Name of city or state or empty for homepage\n * @param {string} locationType - 'city', 'state', 'home', or other page type\n * @return {Object} - Breadcrumb structured data object\n */\nexport const generateBreadcrumbSchema = (locationName = '', locationType = 'home') => {\n  const breadcrumbItems = [\n    {\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": \"https://todayeggrates.com/\"\n    }\n  ];\n  \n  if (locationType === 'state' && locationName) {\n    const formattedState = enhancedLocationFormatter(locationName, 'state');\n    const stateSlug = createSlug(locationName);\n    \n    breadcrumbItems.push({\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": `${formattedState} Egg Rates`,\n      \"item\": `https://todayeggrates.com/state/${stateSlug}-egg-rate/`\n    });\n  } else if (locationType === 'city' && locationName) {\n    const formattedCity = enhancedLocationFormatter(locationName, 'city');\n    const citySlug = createSlug(locationName);\n    const stateName = getStateForCity(locationName);\n    \n    if (stateName) {\n      const stateSlug = createSlug(stateName);\n      breadcrumbItems.push({\n        \"@type\": \"ListItem\",\n        \"position\": 2,\n        \"name\": `${stateName} Egg Rates`,\n        \"item\": `https://todayeggrates.com/state/${stateSlug}-egg-rate/`\n      });\n      \n      breadcrumbItems.push({\n        \"@type\": \"ListItem\",\n        \"position\": 3,\n        \"name\": `${formattedCity} Egg Rates`,\n        \"item\": `https://todayeggrates.com/${citySlug}-egg-rate/`\n      });\n    } else {\n      breadcrumbItems.push({\n        \"@type\": \"ListItem\",\n        \"position\": 2,\n        \"name\": `${formattedCity} Egg Rates`,\n        \"item\": `https://todayeggrates.com/${citySlug}-egg-rate/`\n      });\n    }\n  } else if (locationType !== 'home') {\n    // For other page types like blog, terms, etc.\n    breadcrumbItems.push({\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": locationType.charAt(0).toUpperCase() + locationType.slice(1),\n      \"item\": `https://todayeggrates.com/${locationType.toLowerCase()}/`\n    });\n  }\n  \n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": breadcrumbItems\n  };\n};\n\n/**\n * Generate FAQPage schema with relevant questions based on location\n * @param {string} locationName - Name of city or state or empty for general\n * @param {string} locationType - 'city', 'state', or 'general'\n * @return {Object} - FAQ structured data object\n */\nexport const generateFAQSchema = (locationName = '', locationType = 'general') => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const questions = [];\n  \n  // Common questions for all types\n  questions.push({\n    \"@type\": \"Question\",\n    \"name\": \"How often are egg rates updated on TodayEggRates.com?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Egg rates are updated daily according to the latest NECC (National Egg Coordination Committee) pricing information. We ensure all prices are current as of each morning, with updates typically published by 9:00 AM IST.\"\n    }\n  });\n  \n  // City-specific questions\n  if (locationType === 'city') {\n    questions.push({\n      \"@type\": \"Question\",\n      \"name\": `What is today's egg rate in ${formattedName}?`,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": `Today's egg rate in ${formattedName} is updated daily on our website. The current NECC price for 100 eggs is displayed prominently on the page, along with wholesale and retail market rates for your area.`\n      }\n    });\n    \n    questions.push({\n      \"@type\": \"Question\",\n      \"name\": `Why do egg prices in ${formattedName} fluctuate?`,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": `Egg prices in ${formattedName} fluctuate due to several factors including local supply and demand, transportation costs, seasonal variations, and regional festivals. Feed costs and poultry health issues can also impact prices in the ${formattedName} market.`\n      }\n    });\n    \n    questions.push({\n      \"@type\": \"Question\",\n      \"name\": `Where can I find the cheapest eggs in ${formattedName}?`,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": `The cheapest eggs in ${formattedName} are typically found at wholesale markets early in the morning, or directly from poultry farms in the outskirts. Local neighborhood markets tend to have slightly higher prices due to added retail margins.`\n      }\n    });\n  }\n  \n  // State-specific questions\n  else if (locationType === 'state') {\n    questions.push({\n      \"@type\": \"Question\",\n      \"name\": `Which city in ${formattedName} has the lowest egg prices?`,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": `Cities in ${formattedName} with major poultry farming centers typically have the lowest egg prices. Our website provides a comprehensive comparison of egg rates across all major cities in ${formattedName} state to help you find the best rates.`\n      }\n    });\n    \n    questions.push({\n      \"@type\": \"Question\",\n      \"name\": `How do egg rates compare across different cities in ${formattedName}?`,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": `Egg rates in ${formattedName} vary from city to city based on proximity to production centers, local demand, and transportation costs. Our website shows a city-by-city comparison of egg prices across ${formattedName} with the latest NECC rates.`\n      }\n    });\n  }\n  \n  // General questions for all pages\n  questions.push({\n    \"@type\": \"Question\",\n    \"name\": \"What factors influence egg prices in India?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Egg prices in India are influenced by several factors including feed costs, seasonal demand, festivals, weather conditions, poultry health, and regional supply-demand dynamics. Major festivals like Diwali or periods of extreme heat or cold can significantly impact prices.\"\n    }\n  });\n  \n  questions.push({\n    \"@type\": \"Question\",\n    \"name\": \"What is the difference between NECC rates and local market rates for eggs?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"NECC (National Egg Coordination Committee) rates are guideline wholesale prices set by the industry body representing poultry farmers, while local market rates may vary based on retail markups, local demand-supply conditions, and distribution costs. Retail prices typically include additional margins added by shopkeepers.\"\n    }\n  });\n  \n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"FAQPage\",\n    \"mainEntity\": questions\n  };\n};\n\n/**\n * Generate optimized meta title for better CTR in search results\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'general'\n * @param {Array} eggRates - Optional egg rates data to include current price\n * @return {string} - Optimized meta title\n */\nexport const generateOptimizedTitle = (locationName = '', locationType = 'general', eggRates = []) => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const date = formatDate(new Date(), 'short');\n  const currentPrice = eggRates && eggRates.length > 0 ? `₹${eggRates[0]?.rate}` : '';\n  \n  if (locationType === 'city') {\n    return currentPrice \n      ? `Egg Rate in ${formattedName} Today: ${currentPrice} (${date}) - NECC Egg Prices | TodayEggRates.com`\n      : `Egg Rates in ${formattedName} Today (${date}) - Latest Wholesale & Retail Egg Prices | TodayEggRates.com`;\n  } else if (locationType === 'state') {\n    return `${formattedName} Egg Rates Today (${date}) - City-wise Egg Prices Across ${formattedName} | TodayEggRates.com`;\n  } else {\n    return `Today's Egg Rates - Latest NECC Egg Prices in India (${date}) | TodayEggRates.com`;\n  }\n};\n\n/**\n * Generate optimized meta description with price info and location context\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'general'\n * @param {Array} eggRates - Optional egg rates data to include current price\n * @return {string} - Optimized meta description\n */\nexport const generateOptimizedDescription = (locationName = '', locationType = 'general', eggRates = []) => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const date = formatDate(new Date(), 'short');\n  const stateName = locationType === 'city' ? getStateForCity(locationName) : '';\n  const currentPrice = eggRates && eggRates.length > 0 ? `₹${eggRates[0]?.rate} per 100 eggs` : '';\n  \n  if (locationType === 'city') {\n    return `Today's egg rates in ${formattedName}${stateName ? `, ${stateName}` : ''} (${date}): ${currentPrice ? `${currentPrice}. ` : ''}Get updated wholesale and retail egg prices with daily NECC rates. Compare with yesterday's prices and track trends. Find the cheapest eggs in ${formattedName} markets.`;\n  } else if (locationType === 'state') {\n    return `Check latest egg rates across all cities in ${formattedName} state (${date}). Compare egg prices in different markets to find the lowest rates. Daily updated NECC egg prices with city-wise list, price trends and market analysis for ${formattedName}.`;\n  } else {\n    return `Today's Egg Rates in India (${date}) - Check current egg prices across all cities and states. Daily updated NECC rates, wholesale & retail prices, and market trends. Find the cheapest egg rates in your city with our comprehensive price list.`;\n  }\n};\n\n/**\n * Generate social media friendly title for Open Graph and Twitter Cards\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'general'\n * @param {Array} eggRates - Optional egg rates data to include current price\n * @return {string} - Optimized social media title\n */\nexport const generateSocialTitle = (locationName = '', locationType = 'general', eggRates = []) => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const currentPrice = eggRates && eggRates.length > 0 ? `₹${eggRates[0]?.rate}` : '';\n  \n  if (locationType === 'city') {\n    return currentPrice \n      ? `Today's Egg Rate in ${formattedName}: ${currentPrice} - Updated Daily`\n      : `Latest Egg Prices in ${formattedName} - Updated Today`;\n  } else if (locationType === 'state') {\n    return `${formattedName} Egg Rates - Price Comparison Across All Cities`;\n  } else {\n    return `Today's Egg Rates Across India - NECC Price Updates`;\n  }\n};\n\n/**\n * Returns an array of related search terms for a specific location\n * Useful for internal linking and keyword targeting\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'general'\n * @return {Array} - Array of related search terms\n */\nexport const getRelatedSearchTerms = (locationName = '', locationType = 'general') => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const result = [];\n  \n  if (locationType === 'city') {\n    result.push(\n      `${formattedName} egg rate today`,\n      `egg price in ${formattedName}`,\n      `${formattedName} egg market`,\n      `egg wholesale rate ${formattedName}`,\n      `${formattedName} egg mandi rate`,\n      `egg price per dozen ${formattedName}`,\n      `${formattedName} NECC egg rate`,\n      `fresh egg price in ${formattedName}`,\n      `${formattedName} egg tray price`,\n      `poultry farm eggs ${formattedName}`\n    );\n    \n    const stateName = getStateForCity(locationName);\n    if (stateName) {\n      result.push(\n        `${stateName} egg rates`,\n        `egg price ${stateName}`,\n        `${formattedName} vs other ${stateName} cities egg rate`\n      );\n    }\n  } else if (locationType === 'state') {\n    result.push(\n      `${formattedName} egg rate today`,\n      `egg prices in ${formattedName} cities`,\n      `${formattedName} egg market prices`,\n      `cheapest eggs in ${formattedName}`,\n      `${formattedName} NECC egg rates`,\n      `egg production in ${formattedName}`,\n      `${formattedName} egg price chart`,\n      `egg farms in ${formattedName}`,\n      `${formattedName} poultry market`\n    );\n  } else {\n    result.push(\n      `today egg rate`,\n      `egg price today`,\n      `egg rate chart`,\n      `NECC egg price`,\n      `egg wholesale price`,\n      `egg retail rate`,\n      `cheapest egg rates in India`,\n      `egg price forecast`,\n      `egg market trends`,\n      `poultry market prices`\n    );\n    \n    // Popular cities and states for eggs\n    const popularLocations = [\n      'Delhi', 'Mumbai', 'Bengaluru', 'Hyderabad', \n      'Chennai', 'Kolkata', 'Namakkal', 'Barwala'\n    ];\n    \n    popularLocations.forEach(location => {\n      result.push(`${location} egg rate today`);\n    });\n  }\n  \n  return result;\n};\n\n/**\n * Generate LocalBusiness schema for markets in a specific city\n * @param {string} cityName - Name of the city\n * @param {Array} markets - Array of market names (optional)\n * @return {Object} - LocalBusiness schema object\n */\nexport const generateLocalBusinessSchema = (cityName, markets = []) => {\n  if (!cityName) return null;\n  \n  const formattedName = enhancedLocationFormatter(cityName, 'city');\n  const stateName = getStateForCity(cityName);\n  const currentDate = formatDate(new Date(), 'isoDate');\n  \n  // Default markets if none provided\n  if (!markets || markets.length === 0) {\n    markets = [\n      `${formattedName} Egg Market`,\n      `${formattedName} Poultry Market`,\n      `${formattedName} Wholesale Market`\n    ];\n  }\n  \n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"ItemList\",\n    \"name\": `Egg Markets in ${formattedName}`,\n    \"description\": `Top egg markets and poultry shops in ${formattedName} where you can buy fresh eggs at wholesale and retail prices. Updated on ${currentDate}.`,\n    \"itemListElement\": markets.map((market, index) => ({\n      \"@type\": \"ListItem\",\n      \"position\": index + 1,\n      \"item\": {\n        \"@type\": \"LocalBusiness\",\n        \"name\": market,\n        \"description\": `Buy fresh eggs at competitive prices in ${formattedName}`,\n        \"address\": {\n          \"@type\": \"PostalAddress\",\n          \"addressLocality\": formattedName,\n          \"addressRegion\": stateName || \"India\",\n          \"addressCountry\": \"IN\"\n        },\n        \"telephone\": \"+91-xxxxxxxxxx\",\n        \"openingHoursSpecification\": {\n          \"@type\": \"OpeningHoursSpecification\",\n          \"dayOfWeek\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n          \"opens\": \"06:00\",\n          \"closes\": \"20:00\"\n        },\n        \"priceRange\": \"₹₹\",\n        \"geo\": {\n          \"@type\": \"GeoCoordinates\",\n          \"latitude\": \"xx.xxxx\",\n          \"longitude\": \"xx.xxxx\"\n        }\n      }\n    }))\n  };\n};\n\n/**\n * Generate voice search optimized content snippets\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'general'\n * @param {Array} eggRates - Optional egg rate data\n * @return {Object} - Various voice-optimized snippets\n */\nexport const generateVoiceSearchSnippets = (locationName = '', locationType = 'general', eggRates = []) => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const currentPrice = eggRates && eggRates.length > 0 ? `₹${eggRates[0]?.rate}` : 'varies by market';\n  \n  // Questions that might be asked to voice assistants\n  const questions = [\n    `What is today's egg rate in ${formattedName}?`,\n    `How much do eggs cost in ${formattedName} today?`,\n    `What is the current egg price in ${formattedName}?`,\n    `Tell me today's egg price in ${formattedName}`\n  ];\n  \n  // Direct answers optimized for voice search\n  const answers = [\n    `Today's egg rate in ${formattedName} is ${currentPrice} per 100 eggs.`,\n    `Eggs in ${formattedName} currently cost ${currentPrice} per 100 eggs according to today's NECC rates.`,\n    `The current egg price in ${formattedName} is ${currentPrice} for 100 eggs, or about ₹${(parseFloat(currentPrice) * 0.01).toFixed(2)} per egg.`,\n    `In ${formattedName}, eggs are priced at ${currentPrice} per 100 eggs today.`\n  ];\n  \n  // Longer context answers for more detailed voice responses\n  const detailedAnswer = `According to the latest NECC rates, today's egg price in ${formattedName} is ${currentPrice} per 100 eggs. This is the wholesale rate, while retail prices may be slightly higher. Egg prices in ${formattedName} are updated daily and may fluctuate based on market conditions, feed costs, and seasonal demand.`;\n  \n  return {\n    questions,\n    answers,\n    detailedAnswer,\n    speakableSelector: locationType === 'city' ? '.city-rate-summary' : locationType === 'state' ? '.state-rate-summary' : '.india-rate-summary'\n  };\n};\n\n/**\n * Generate a news article schema for daily egg rate updates\n * @param {string} locationName - Name of city or state\n * @param {string} locationType - 'city', 'state', or 'general'\n * @param {Array} eggRates - Egg rate data\n * @param {string} canonicalUrl - The canonical URL\n * @return {Object} - NewsArticle schema\n */\nexport const generateNewsArticleSchema = (locationName = '', locationType = 'general', eggRates = [], canonicalUrl) => {\n  const formattedName = enhancedLocationFormatter(locationName, locationType);\n  const formattedDate = formatDate(new Date(), 'full');\n  const currentPrice = eggRates && eggRates.length > 0 ? `₹${eggRates[0]?.rate}` : 'updated';\n  \n  let headline, articleBody;\n  \n  if (locationType === 'city') {\n    headline = `Egg Rates in ${formattedName} Updated to ${currentPrice} on ${formattedDate}`;\n    articleBody = `The egg rates in ${formattedName} have been updated today (${formattedDate}). According to the latest NECC (National Egg Coordination Committee) data, the current egg price in ${formattedName} is ${currentPrice} per 100 eggs. This represents the wholesale rate for farm fresh eggs in the ${formattedName} market. Retail prices in local markets may vary slightly. These egg rates are updated daily to help consumers, retailers, and poultry farmers track market trends.`;\n  } else if (locationType === 'state') {\n    headline = `${formattedName} Egg Rates Updated Across All Cities on ${formattedDate}`;\n    articleBody = `Egg rates across all cities in ${formattedName} state have been updated today (${formattedDate}). The latest NECC data shows variations in egg prices across different cities within ${formattedName}, with rates influenced by proximity to production centers and local market conditions. This daily update provides a comprehensive city-wise comparison to help consumers find the best egg prices in their area.`;\n  } else {\n    headline = `Today's Egg Rates Across India Updated on ${formattedDate}`;\n    articleBody = `Egg rates across all states and major cities in India have been updated today (${formattedDate}). The latest NECC data shows the current nationwide egg price trends, with southern states generally offering lower rates compared to northern regions. This daily update helps consumers track egg prices across different markets and find the best rates in their area.`;\n  }\n  \n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"NewsArticle\",\n    \"headline\": headline,\n    \"datePublished\": new Date().toISOString(),\n    \"dateModified\": new Date().toISOString(),\n    \"description\": `Get the latest egg rates for ${formattedName} updated on ${formattedDate}. Check current NECC egg prices and market trends.`,\n    \"image\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://todayeggrates.com/eggpic.png\",\n      \"width\": 1200,\n      \"height\": 630\n    },\n    \"author\": {\n      \"@type\": \"Organization\",\n      \"name\": \"TodayEggRates.com\",\n      \"url\": \"https://todayeggrates.com\"\n    },\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"TodayEggRates.com\",\n      \"logo\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://todayeggrates.com/logo192.png\",\n        \"width\": 192,\n        \"height\": 192\n      }\n    },\n    \"mainEntityOfPage\": canonicalUrl,\n    \"articleBody\": articleBody,\n    \"speakable\": {\n      \"@type\": \"SpeakableSpecification\",\n      \"cssSelector\": [\"h1\", \".rate-summary\", \".current-price\"]\n    }\n  };\n};\n\n/**\n * Generate WebPage schema for better indexing\n * @param {string} pageTitle - Title of the page\n * @param {string} pageDescription - Description of the page\n * @param {string} canonicalUrl - The canonical URL\n * @param {Date} lastModified - Last modified date\n * @return {Object} - WebPage schema\n */\nexport const generateWebPageSchema = (pageTitle, pageDescription, canonicalUrl, lastModified = new Date()) => {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebPage\",\n    \"name\": pageTitle,\n    \"description\": pageDescription,\n    \"url\": canonicalUrl,\n    \"dateModified\": lastModified.toISOString(),\n    \"inLanguage\": \"en-IN\",\n    \"primaryImageOfPage\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://todayeggrates.com/eggpic.png\"\n    },\n    \"speakable\": {\n      \"@type\": \"SpeakableSpecification\",\n      \"cssSelector\": [\"h1\", \".egg-rates-summary\", \".main-content\"]\n    },\n    \"mainEntity\": {\n      \"@type\": \"Dataset\",\n      \"name\": \"Egg Price Data\",\n      \"description\": \"Daily updated egg prices across different markets\"\n    }\n  };\n};\n\n/**\n * Generate optimized canonical URLs with proper formatting\n * @param {string} path - URL path\n * @param {Object} params - URL parameters\n * @return {string} - Properly formatted canonical URL\n */\nexport const generateCanonicalUrl = (path = '', params = {}) => {\n  const baseUrl = 'https://todayeggrates.com';\n  let canonicalPath = path.trim();\n  \n  // Ensure path starts with a slash\n  if (canonicalPath && !canonicalPath.startsWith('/')) {\n    canonicalPath = '/' + canonicalPath;\n  }\n  \n  // Make sure path ends with a trailing slash for consistency\n  if (canonicalPath && !canonicalPath.endsWith('/')) {\n    canonicalPath += '/';\n  }\n  \n  // Build query string if there are parameters\n  let queryString = '';\n  if (Object.keys(params).length > 0) {\n    queryString = '?' + Object.entries(params)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join('&');\n  }\n  \n  return `${baseUrl}${canonicalPath}${queryString}`;\n};\n\n/**\n * Generate HowTo schema for cooking with eggs\n * This increases the content value of the egg rates website\n * @return {Object} - HowTo structured data\n */\nexport const generateEggRecipeSchema = () => {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"HowTo\",\n    \"name\": \"How to Make Perfect Boiled Eggs\",\n    \"description\": \"A simple guide to making perfect boiled eggs every time with farm fresh eggs.\",\n    \"totalTime\": \"PT10M\",\n    \"estimatedCost\": {\n      \"@type\": \"MonetaryAmount\",\n      \"currency\": \"INR\",\n      \"value\": \"30\"\n    },\n    \"supply\": [\n      {\n        \"@type\": \"HowToSupply\",\n        \"name\": \"Fresh eggs\"\n      },\n      {\n        \"@type\": \"HowToSupply\",\n        \"name\": \"Water\"\n      },\n      {\n        \"@type\": \"HowToSupply\",\n        \"name\": \"Salt\"\n      }\n    ],\n    \"tool\": [\n      {\n        \"@type\": \"HowToTool\",\n        \"name\": \"Pot\"\n      },\n      {\n        \"@type\": \"HowToTool\",\n        \"name\": \"Stove\"\n      },\n      {\n        \"@type\": \"HowToTool\",\n        \"name\": \"Timer\"\n      }\n    ],\n    \"step\": [\n      {\n        \"@type\": \"HowToStep\",\n        \"name\": \"Prepare the pot\",\n        \"text\": \"Fill a pot with enough water to cover the eggs by about an inch.\",\n        \"url\": \"https://todayeggrates.com/blog/perfect-boiled-eggs/#step1\"\n      },\n      {\n        \"@type\": \"HowToStep\",\n        \"name\": \"Heat the water\",\n        \"text\": \"Bring the water to a boil over high heat.\",\n        \"url\": \"https://todayeggrates.com/blog/perfect-boiled-eggs/#step2\"\n      },\n      {\n        \"@type\": \"HowToStep\",\n        \"name\": \"Add the eggs\",\n        \"text\": \"Carefully lower the eggs into the boiling water using a spoon.\",\n        \"url\": \"https://todayeggrates.com/blog/perfect-boiled-eggs/#step3\"\n      },\n      {\n        \"@type\": \"HowToStep\",\n        \"name\": \"Boil the eggs\",\n        \"text\": \"For soft-boiled eggs, cook for 6 minutes. For hard-boiled eggs, cook for 9 minutes.\",\n        \"url\": \"https://todayeggrates.com/blog/perfect-boiled-eggs/#step4\"\n      },\n      {\n        \"@type\": \"HowToStep\",\n        \"name\": \"Cool the eggs\",\n        \"text\": \"Transfer the eggs to an ice bath to stop the cooking process.\",\n        \"url\": \"https://todayeggrates.com/blog/perfect-boiled-eggs/#step5\"\n      }\n    ]\n  };\n};\n\n/**\n * Generate a table of egg nutrition facts as structured data\n * @return {Object} - Table structured data\n */\nexport const generateEggNutritionSchema = () => {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Table\",\n    \"about\": \"Egg Nutrition Facts\",\n    \"name\": \"Nutritional Value of Eggs\",\n    \"description\": \"Comprehensive nutrition facts for one large egg (50g).\",\n    \"url\": \"https://todayeggrates.com/egg-nutrition/\",\n    \"tableRows\": [\n      {\n        \"@type\": \"TableRow\",\n        \"rowPosition\": 1,\n        \"cells\": [\n          {\"@type\": \"TableCell\", \"cellPosition\": 1, \"text\": \"Nutrient\"},\n          {\"@type\": \"TableCell\", \"cellPosition\": 2, \"text\": \"Amount\"}\n        ]\n      },\n      {\n        \"@type\": \"TableRow\",\n        \"rowPosition\": 2,\n        \"cells\": [\n          {\"@type\": \"TableCell\", \"cellPosition\": 1, \"text\": \"Calories\"},\n          {\"@type\": \"TableCell\", \"cellPosition\": 2, \"text\": \"72\"}\n        ]\n      },\n      {\n        \"@type\": \"TableRow\",\n        \"rowPosition\": 3,\n        \"cells\": [\n          {\"@type\": \"TableCell\", \"cellPosition\": 1, \"text\": \"Protein\"},\n          {\"@type\": \"TableCell\", \"cellPosition\": 2, \"text\": \"6.3g\"}\n        ]\n      },\n      {\n        \"@type\": \"TableRow\",\n        \"rowPosition\": 4,\n        \"cells\": [\n          {\"@type\": \"TableCell\", \"cellPosition\": 1, \"text\": \"Fat\"},\n          {\"@type\": \"TableCell\", \"cellPosition\": 2, \"text\": \"4.8g\"}\n        ]\n      },\n      {\n        \"@type\": \"TableRow\",\n        \"rowPosition\": 5,\n        \"cells\": [\n          {\"@type\": \"TableCell\", \"cellPosition\": 1, \"text\": \"Vitamin A\"},\n          {\"@type\": \"TableCell\", \"cellPosition\": 2, \"text\": \"270 IU\"}\n        ]\n      },\n      {\n        \"@type\": \"TableRow\",\n        \"rowPosition\": 6,\n        \"cells\": [\n          {\"@type\": \"TableCell\", \"cellPosition\": 1, \"text\": \"Vitamin D\"},\n          {\"@type\": \"TableCell\", \"cellPosition\": 2, \"text\": \"41 IU\"}\n        ]\n      }\n    ]\n  };\n};\n\n/**\n * Generate SEO-optimized image ALT text\n * @param {string} locationName - Name of city or state\n * @param {string} imageType - Type of image (e.g., 'egg-rate-chart', 'market-photo')\n * @return {string} - SEO-friendly ALT text\n */\nexport const generateImageAltText = (locationName = '', imageType = 'egg-rates') => {\n  const formattedName = enhancedLocationFormatter(locationName);\n  const date = formatDate(new Date(), 'short');\n  \n  const altTextTemplates = {\n    'egg-rates': `Today's egg rates in ${formattedName || 'India'} (${date}) - Latest egg price chart`,\n    'egg-tray': `Fresh egg tray pricing in ${formattedName || 'Indian'} markets - ${date} rates`,\n    'market-photo': `${formattedName || 'Indian'} egg market - Wholesale and retail egg prices`,\n    'price-comparison': `Egg price comparison chart for ${formattedName || 'all Indian cities'} - ${date}`,\n    'farm-eggs': `Farm fresh eggs from ${formattedName || 'Indian'} poultry farms - Today's rates`,\n    'price-trend': `Egg price trend graph for ${formattedName || 'India'} - Rate fluctuation analysis`\n  };\n  \n  return altTextTemplates[imageType] || `Egg rates in ${formattedName || 'India'} - Updated ${date}`;\n};\n\n/**\n * Returns the appropriate hreflang links for the current page\n * @param {string} path - Current page path\n * @return {Array} - Array of hreflang objects {lang, url}\n */\nexport const getHreflangLinks = (path = '') => {\n  const languages = ['en', 'hi', 'ta', 'te', 'mr', 'bn']; // English, Hindi, Tamil, Telugu, Marathi, Bengali\n  const currentPath = path.startsWith('/') ? path : '/' + path;\n  \n  return languages.map(lang => {\n    const domainPrefix = lang === 'en' ? '' : lang + '.';\n    return {\n      lang: lang === 'en' ? 'en-in' : lang,\n      url: `https://${domainPrefix}todayeggrates.com${currentPath}`\n    };\n  }).concat({\n    lang: 'x-default',\n    url: `https://todayeggrates.com${currentPath}`\n  });\n};\n\n/**\n * Generates an XML sitemap entry for a specific URL\n * @param {string} url - The full URL\n * @param {Date} lastmod - Last modified date\n * @param {string} changefreq - Change frequency (daily, weekly, etc)\n * @param {number} priority - Priority (0.0 to 1.0)\n * @return {string} - XML sitemap entry\n */\nexport const generateSitemapEntry = (url, lastmod = new Date(), changefreq = 'daily', priority = 0.8) => {\n  return `\n  <url>\n    <loc>${url}</loc>\n    <lastmod>${lastmod.toISOString().split('T')[0]}</lastmod>\n    <changefreq>${changefreq}</changefreq>\n    <priority>${priority}</priority>\n  </url>`;\n};\n\n// Define all utility functions\nconst seoHelpers = {\n  createSlug,\n  formatLocationName,\n  formatDate,\n  generateLocationSchema,\n  generateSeoTitle,\n  generateSeoDescription,\n  getCommonEggKeywords,\n  enhancedLocationFormatter,\n  getStateForCity,\n  generateAdvancedSchema,\n  generateBreadcrumbSchema,\n  generateFAQSchema,\n  generateOptimizedTitle,\n  generateOptimizedDescription,\n  generateSocialTitle,\n  getRelatedSearchTerms,\n  generateLocalBusinessSchema,\n  generateVoiceSearchSnippets,\n  generateNewsArticleSchema,\n  generateWebPageSchema,\n  generateCanonicalUrl,\n  generateEggRecipeSchema,\n  generateEggNutritionSchema,\n  generateImageAltText,\n  getHreflangLinks,\n  generateSitemapEntry\n};\n\n// Export the module\nexport default seoHelpers;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Helmet } from '../App';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\n\n// Import utilities\nimport { \n  enhancedLocationFormatter, \n  getStateForCity \n} from '../utils/seoHelpers';\n\nconst WebStoryViewer = () => {\n  const { slug } = useParams();\n  const navigate = useNavigate();\n  const [loading] = useState(true);\n  const [error] = useState(null);\n  const [storyData, setStoryData] = useState(null);\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n\n  // Parse the slug to extract city name\n  useEffect(() => {\n    // Extract city name from the slug (removing '-egg-rate' suffix)\n    const citySlug = slug.replace('-egg-rate', '');\n    const cityName = citySlug.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n    \n    // Get proper formatted city name and corresponding state\n    const formattedCity = enhancedLocationFormatter(cityName, 'city');\n    const stateName = getStateForCity(cityName) || '';\n    \n    setStoryData({\n      cityName: formattedCity,\n      stateName,\n      citySlug,\n      lastUpdated: new Date().toLocaleDateString('en-IN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      })\n    });\n\n    // Redirect to the actual story after a brief delay to allow search engines to index\n    const timer = setTimeout(() => {\n      window.location.href = `/webstories/${slug}.html`;\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, [slug]);\n\n  // Generate SEO metadata\n  const generateSEO = () => {\n    if (!storyData) return {};\n    \n    const { cityName, stateName, citySlug, lastUpdated } = storyData;\n    \n    const title = `Egg Rate in ${cityName}${stateName ? `, ${stateName}` : ''} Today - Web Story | TodayEggRates.com`;\n    const description = `View today's egg rates in ${cityName}${stateName ? `, ${stateName}` : ''} in our interactive Web Story. Get updated egg prices as of ${lastUpdated}. Check wholesale and retail egg rates.`;\n    const canonicalUrl = `https://todayeggrates.com/webstory/${citySlug}-egg-rate/`;\n    \n    // Generate structured data for the web story\n    const schema = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"WebPage\",\n      \"name\": title,\n      \"description\": description,\n      \"url\": canonicalUrl,\n      \"mainEntity\": {\n        \"@type\": \"Article\",\n        \"headline\": `Egg Rate in ${cityName} Today (${lastUpdated})`,\n        \"datePublished\": new Date().toISOString(),\n        \"dateModified\": new Date().toISOString(),\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"name\": \"TodayEggRates.com\",\n          \"logo\": {\n            \"@type\": \"ImageObject\",\n            \"url\": \"https://todayeggrates.com/logo192.png\"\n          }\n        },\n        \"image\": `https://todayeggrates.com/images/webstories/thumbnail-${citySlug}.jpg`,\n        \"author\": {\n          \"@type\": \"Organization\",\n          \"name\": \"TodayEggRates.com\"\n        },\n        \"speakable\": {\n          \"@type\": \"SpeakableSpecification\",\n          \"cssSelector\": [\".web-story-title\", \".web-story-content\"]\n        }\n      }\n    };\n    \n    return { title, description, canonicalUrl, schema };\n  };\n\n  const seo = generateSEO();\n\n  if (loading && !error) {\n    return (\n      <>\n        {storyData && <Helmet {...seo} />}\n        <div className=\"bg-gray-50 min-h-screen flex flex-col\">\n          <Navbar\n            selectedState={selectedState}\n            setSelectedState={setSelectedState}\n            setSelectedCity={setSelectedCity}\n            selectedCity={selectedCity}\n          />\n          <div className=\"container mx-auto p-6 flex-grow flex flex-col items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500 mb-8\"></div>\n            \n            {storyData && (\n              <div className=\"text-center max-w-2xl web-story-content\">\n                <h1 className=\"text-3xl font-bold mb-4 web-story-title\">\n                  Egg Rate in {storyData.cityName}{storyData.stateName ? `, ${storyData.stateName}` : ''}\n                </h1>\n                <p className=\"mb-4\">Updated on {storyData.lastUpdated}</p>\n                <p className=\"mb-6\">Loading interactive Web Story with today's egg rates...</p>\n                <div className=\"text-sm text-gray-600\">\n                  <p>This Web Story provides the latest egg prices in {storyData.cityName}, including per-egg, per-tray, and wholesale rates updated daily.</p>\n                </div>\n              </div>\n            )}\n          </div>\n          <Footer />\n        </div>\n      </>\n    );\n  }\n\n  if (error) {\n    return (\n      <>\n        <Helmet \n          title=\"Web Story Not Found | Today Egg Rates\" \n          description=\"The egg rate web story you're looking for could not be found. Please check our homepage for the latest egg rates across India.\"\n          canonicalUrl=\"https://todayeggrates.com/webstories/\"\n        />\n        <div className=\"bg-gray-50 min-h-screen flex flex-col\">\n          <Navbar\n            selectedState={selectedState}\n            setSelectedState={setSelectedState}\n            setSelectedCity={setSelectedCity}\n            selectedCity={selectedCity}\n          />\n          <div className=\"container mx-auto p-6 flex-grow\">\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n              <p>Error loading web story: {error}</p>\n              <button \n                onClick={() => navigate('/webstories')}\n                className=\"mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n              >\n                Back to Web Stories\n              </button>\n            </div>\n          </div>\n          <Footer />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {storyData && <Helmet {...seo} />}\n      <div className=\"bg-gray-50 min-h-screen flex flex-col\">\n        <Navbar\n          selectedState={selectedState}\n          setSelectedState={setSelectedState}\n          setSelectedCity={setSelectedCity}\n          selectedCity={selectedCity}\n        />\n        <div className=\"container mx-auto p-6 flex-grow flex items-center justify-center\">\n          <p>Redirecting to web story...</p>\n        </div>\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default WebStoryViewer;\n"],"names":["enhancedLocationFormatter","name","lowercaseName","toLowerCase","trim","locationVariants","split","map","word","charAt","toUpperCase","slice","join","getStateForCity","cityName","WebStoryViewer","slug","useParams","navigate","useNavigate","loading","useState","error","storyData","setStoryData","selectedState","setSelectedState","selectedCity","setSelectedCity","useEffect","citySlug","replace","formattedCity","stateName","lastUpdated","Date","toLocaleDateString","year","month","day","timer","setTimeout","window","location","href","concat","clearTimeout","seo","generateSEO","title","description","canonicalUrl","schema","toISOString","_jsxs","_Fragment","children","_jsx","Helmet","_objectSpread","className","Navbar","Footer","onClick"],"sourceRoot":""}