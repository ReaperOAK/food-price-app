{"version":3,"file":"static/js/admin-page.c5414b88.chunk.js","mappings":"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","sources":["components/admin/RateForm.js","components/layout/AdminNavbar.js","components/common/StateSelect.js","components/common/CitySelect.js","components/admin/AddStateForm.js","components/admin/AddCityForm.js","pages/AdminPage.js"],"sourcesContent":["import React from 'react';\n\nconst RateForm = ({\n  eggRate,\n  setEggRate,\n  handleSubmit,\n  handleSelectAll,\n  handleCopyPreviousRates,\n}) => {\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-6 grid grid-cols-1 gap-4\">\n      <button\n        type=\"button\"\n        onClick={handleSelectAll}\n        className=\"bg-green-600 text-white p-3 rounded w-full hover:bg-green-700 transition\"\n      >\n        Select All Cities\n      </button>\n      <input\n        type=\"date\"\n        value={eggRate.date}\n        onChange={(e) => setEggRate({ ...eggRate, date: e.target.value })}\n        className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n        required\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Rate\"\n        value={eggRate.rate}\n        onChange={(e) => setEggRate({ ...eggRate, rate: e.target.value })}\n        className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n        required\n      />\n      <button\n        type=\"submit\"\n        className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n      >\n        Update Rates\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleCopyPreviousRates}\n        className=\"bg-yellow-600 text-white p-3 rounded w-full hover:bg-yellow-700 transition\"\n      >\n        Copy Previous Rates\n      </button>\n    </form>\n  );\n};\n\nexport default RateForm;","import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst AdminNavbar = ({setIsAuthenticated}) => {\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  return (\n    <nav className=\"bg-gray-800 p-4 shadow-lg\">\n      <div className=\"container mx-auto px-4 w-full max-w-7xl flex justify-between items-center transition-none\">\n        <div>\n          <Link to=\"/admin\" className=\"text-white text-2xl font-bold\">Admin Dashboard</Link>\n        </div>\n        <div className=\"flex space-x-4\">\n          <button \n            onClick={handleLogout} \n            className=\"text-white bg-red-600 hover:bg-red-700 px-4 py-2 rounded transition duration-150 ease-in-out\"\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default AdminNavbar;\n","import React from 'react';\nimport Select from 'react-select';\n\nconst StateSelect = ({ states, selectedState, handleStateChange }) => (\n  <Select\n    options={states}\n    value={selectedState}\n    onChange={handleStateChange}\n    className=\"w-full mb-4\"\n    placeholder=\"Select State\"\n  />\n);\n\nexport default StateSelect;","import React from 'react';\nimport Select from 'react-select';\n\nconst CitySelect = ({ options, selectedOptions, setSelectedOptions }) => {\n  // Remove duplicate cities from options\n  const uniqueOptions = Array.from(new Set(options.map(option => option.value)))\n    .map(value => options.find(option => option.value === value));\n\n  return (\n    <Select\n      isMulti\n      options={uniqueOptions}\n      value={selectedOptions}\n      onChange={setSelectedOptions}\n      className=\"w-full\"\n      styles={{\n        control: (base) => ({\n          ...base,\n          backgroundColor: 'white',\n          borderColor: 'transparent',\n          boxShadow: 'none',\n          '&:hover': {\n            borderColor: 'transparent',\n          },\n          padding: '0.5rem', // Add padding for better touch target\n          borderRadius: '0.375rem', // Tailwind rounded\n        }),\n        menu: (base) => ({\n          ...base,\n          zIndex: 9999,\n        }),\n        placeholder: (base) => ({\n          ...base,\n          color: '#A0AEC0', // Placeholder color for better contrast\n        }),\n      }}\n      placeholder=\"Select Cities, States\"\n    />\n  );\n};\n\nexport default CitySelect;","import React from 'react';\n\nconst AddStateForm = ({ newState, setNewState, handleAddState }) => (\n  <form onSubmit={handleAddState} className=\"mb-6 grid grid-cols-1 gap-4\">\n    <input\n      type=\"text\"\n      placeholder=\"New State\"\n      value={newState}\n      onChange={(e) => setNewState(e.target.value)}\n      className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n      required\n    />\n    <button\n      type=\"submit\"\n      className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n    >\n      Add State\n    </button>\n  </form>\n);\n\nexport default AddStateForm;","import React from 'react';\nimport Select from 'react-select';\n\nconst AddCityForm = ({\n  states,\n  newCity,\n  setNewCity,\n  newCityState,\n  setNewCityState,\n  handleAddCity,\n}) => (\n  <form onSubmit={handleAddCity} className=\"mb-6 grid grid-cols-1 gap-4\">\n    <Select\n      options={states}\n      value={newCityState}\n      onChange={setNewCityState}\n      className=\"w-full mb-4\"\n      placeholder=\"Select State for New City\"\n    />\n    <input\n      type=\"text\"\n      placeholder=\"New City\"\n      value={newCity}\n      onChange={(e) => setNewCity(e.target.value)}\n      className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n      required\n    />\n    <button\n      type=\"submit\"\n      className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n    >\n      Add City\n    </button>\n  </form>\n);\n\nexport default AddCityForm;","import React, { useState, useEffect, useCallback } from 'react';\nimport Select from 'react-select';\nimport AdminNavbar from '../components/layout/AdminNavbar';\nimport StateSelect from '../components/common/StateSelect';\nimport CitySelect from '../components/common/CitySelect';\nimport RateForm from '../components/admin/RateForm';\nimport AddStateForm from '../components/admin/AddStateForm';\nimport AddCityForm from '../components/admin/AddCityForm';\nimport RateTable from '../components/rates/RateTable';\n\nconst AdminPage = ({ setIsAuthenticated }) => {\n  const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\n  const [eggRate, setEggRate] = useState({ date: today, rate: '' });\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [eggRates, setEggRates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortConfig, setSortConfig] = useState({ key: 'city', direction: 'ascending' });\n  const [states, setStates] = useState([]);\n  const [selectedState, setSelectedState] = useState(null);\n  const [newState, setNewState] = useState('');\n  const [newCity, setNewCity] = useState('');\n  const [newCityState, setNewCityState] = useState(null);\n  const [removeState, setRemoveState] = useState('');\n  const [removeCity, setRemoveCity] = useState(null);\n  const [removeCityState, setRemoveCityState] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(today);\n  \n  // Define fetchEggRates function to get egg rates data\n  const fetchEggRates = useCallback(() => {\n    setLoading(true);\n    fetch(`/php/api/rates/get_all_rates.php?date=${selectedDate}`)\n      .then(res => res.json())\n      .then(data => {\n        setEggRates(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching rates:', error);\n        setError(error);\n        setLoading(false);\n      });\n  }, [selectedDate]);\n  \n  // Define fetchCitiesAndStates function to get location data\n  const fetchCitiesAndStates = useCallback(() => {\n    fetch('/php/api/location/get_states_and_cities.php')\n      .then(res => res.json())\n      .then(data => {\n        const combinedOptions = [];\n        const stateOptions = [];\n        for (const state in data) {\n          stateOptions.push({ value: state, label: state });\n          combinedOptions.push({\n            value: state,\n            label: state,\n            type: 'state',\n          });\n          data[state].forEach(city => {\n            combinedOptions.push({\n              value: `${city}-${state}`, // Ensure unique value\n              label: `${city}, ${state}`,\n              type: 'city',\n            });\n          });\n        }\n        setOptions(combinedOptions);\n        setStates(stateOptions);\n      })\n      .catch(error => console.error('Error fetching states and cities:', error));\n  }, []);\n\n  // Use fetchEggRates in useEffect instead of duplicate code\n  useEffect(() => {\n    fetchEggRates();\n  }, [fetchEggRates]);\n\n  // Use fetchCitiesAndStates in useEffect\n  useEffect(() => {\n    fetchCitiesAndStates();\n  }, [fetchCitiesAndStates]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const payload = selectedOptions.map(option => {\n      const [cityName, state] = option.type === 'city' ? option.label.split(', ') : [null, option.value];\n      return {\n        city: cityName,\n        state: state || '', // Ensure state is not null\n        date: eggRate.date,\n        rate: eggRate.rate,\n        type: option.type,\n      };\n    });\n\n    fetch('/php/api/rates/update_multiple_rates.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload),\n    })\n      .then(res => res.json())\n      .then(response => {\n        fetchEggRates(); // Refresh the list of egg rates\n        resetForm(); // Reset form\n      })\n      .catch(error => console.error(\"Error submitting data:\", error));\n  };\n\n  const handleDelete = (rate) => {\n    fetch('/php/api/rates/delete_rate.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: rate.id }), // Send ID for deletion\n    })\n      .then(res => res.json())\n      .then(response => {\n        fetchEggRates(); // Refresh the list of egg rates\n      })\n      .catch(error => console.error(\"Error deleting item:\", error));\n  };\n\n  const handleSort = (key) => {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const sortedEggRates = React.useMemo(() => {\n    let sortableRates = [...eggRates];\n    sortableRates.sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) {\n        return sortConfig.direction === 'ascending' ? -1 : 1;\n      }\n      if (a[sortConfig.key] > b[sortConfig.key]) {\n        return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n      return 0;\n    });\n    return sortableRates;\n  }, [eggRates, sortConfig]);\n\n  const handleStateChange = (selectedState) => {\n    setSelectedState(selectedState);\n    setSelectedOptions([]); // Reset selected options\n    const stateOptions = options.filter(option => option.type === 'city' && option.label.includes(selectedState.value));\n    setSelectedOptions(stateOptions);\n  };\n\n  const handleSelectAll = () => {\n    const allCities = options.filter(option => option.type === 'city');\n    setSelectedOptions(allCities);\n  };\n\n  const handleCopyPreviousRates = () => {\n    if (selectedOptions.length === 0) {\n      alert('Please select at least one city.');\n      return;\n    }\n  \n    const fetchLatestRates = async (cities) => {\n      console.log('Fetching latest rates for cities:', cities);\n      const response = await fetch('/php/api/rates/get_latest_rates.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cities),\n      });\n      const data = await response.json();\n      console.log('Fetched latest rates:', data);\n      return data;\n    };\n  \n    const updateRates = async () => {\n      const cities = selectedOptions\n        .filter(option => option.type === 'city') // Ensure only cities are selected\n        .map(option => {\n          const [cityName, state] = option.label.split(', ');\n          return { city: cityName, state: state };\n        });\n  \n      console.log('Selected cities for updating rates:', cities);\n  \n      const latestRates = await fetchLatestRates(cities);\n  \n      const payload = latestRates.map(rate => ({\n        city: rate.city,\n        state: rate.state,\n        date: eggRate.date,\n        rate: rate.rate || eggRate.rate,\n        type: 'city',\n      }));\n  \n      console.log('Payload for updating rates:', payload);\n  \n      fetch('/php/api/rates/update_multiple_rates.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      })\n        .then(res => res.json())\n        .then(response => {\n          console.log('Response from updating rates:', response);\n          fetchEggRates(); // Refresh the list of egg rates\n          resetForm(); // Reset form\n        })\n        .catch(error => console.error(\"Error submitting data:\", error));\n    };\n  \n    updateRates();\n  };\n\n  const handleAddState = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/add_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'state', name: newState }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setNewState(''); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error adding state:\", error));\n  };\n\n  const handleAddCity = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/add_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'city', name: newCity, state: newCityState.value }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setNewCity(''); // Reset form\n          setNewCityState(null); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error adding city:\", error));\n  };\n\n  const handleRemoveState = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/remove_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'state', name: removeState }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setRemoveState(''); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error removing state:\", error));\n  };\n\n  const handleRemoveCity = (e) => {\n    e.preventDefault();\n    fetch('/php/api/location/remove_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'city', name: removeCity.label.split(', ')[0], state: removeCityState.value }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setRemoveCity(null); // Reset form\n          setRemoveCityState(null); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error removing city:\", error));\n  };\n\n  const handleEditRate = (rate) => {\n    const updatedRates = eggRates.map(r => r.id === rate.id ? rate : r);\n    setEggRates(updatedRates);\n  \n    // Send the updated rate to the backend\n    fetch('/php/api/rates/update_rate.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(rate),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchEggRates(); // Refresh the list of egg rates\n        } else {\n          console.error(\"Error updating rate:\", response.error);\n        }\n      })\n      .catch(error => console.error(\"Error updating rate:\", error));\n  };\n\n  const resetForm = () => {\n    setEggRate({ date: today, rate: '' });\n    setSelectedOptions([]);\n    setSelectedState(null);\n    setRemoveState('');\n    setRemoveCity(null);\n    setRemoveCityState(null);\n    setNewState('');\n    setNewCity('');\n    setNewCityState(null);\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error loading data: {error.message}</div>;\n\n  return (\n    <>\n      <AdminNavbar setIsAuthenticated={setIsAuthenticated} />\n      <div className=\"p-6 bg-gray-100 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-md\">\n          <h1 className=\"text-3xl font-bold mb-6 text-center text-blue-600\">Admin Egg Rate Management</h1>\n          <div className=\"mb-6\">\n            <StateSelect\n              states={states}\n              selectedState={selectedState}\n              handleStateChange={handleStateChange}\n            />\n            <CitySelect\n              options={options}\n              selectedOptions={selectedOptions}\n              setSelectedOptions={setSelectedOptions}\n            />\n            <RateForm\n              eggRate={eggRate}\n              setEggRate={setEggRate}\n              handleSubmit={handleSubmit}\n              handleSelectAll={handleSelectAll}\n              handleCopyPreviousRates={handleCopyPreviousRates}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Add New State</h2>\n            <AddStateForm\n              newState={newState}\n              setNewState={setNewState}\n              handleAddState={handleAddState}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Add New City</h2>\n            <AddCityForm\n              states={states}\n              newCity={newCity}\n              setNewCity={setNewCity}\n              newCityState={newCityState}\n              setNewCityState={setNewCityState}\n              handleAddCity={handleAddCity}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Remove State</h2>\n            <form onSubmit={handleRemoveState} className=\"mb-6 grid grid-cols-1 gap-4\">\n              <Select\n                options={states}\n                value={states.find(state => state.value === removeState)}\n                onChange={(selectedOption) => setRemoveState(selectedOption.value)}\n                className=\"w-full mb-4\"\n                placeholder=\"Select State to Remove\"\n              />\n              <button type=\"submit\" className=\"bg-red-600 text-white p-3 rounded w-full hover:bg-red-700 transition\">\n                Remove State\n              </button>\n            </form>\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Remove City</h2>\n            <form onSubmit={handleRemoveCity} className=\"mb-6 grid grid-cols-1 gap-4\">\n              <Select\n                options={states}\n                value={states.find(state => state.value === removeCityState?.value)}\n                onChange={setRemoveCityState}\n                className=\"w-full mb-4\"\n                placeholder=\"Select State for City to Remove\"\n              />\n              <Select\n                options={options.filter(option => option.type === 'city' && option.label.includes(removeCityState?.value))}\n                value={removeCity}\n                onChange={setRemoveCity}\n                className=\"w-full mb-4\"\n                placeholder=\"Select City to Remove\"\n              />\n              <button type=\"submit\" className=\"bg-red-600 text-white p-3 rounded w-full hover:bg-red-700 transition\">\n                Remove City\n              </button>\n            </form>\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Current Egg Rates</h2>\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"date\">\n              Select Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n            />\n          </div>          <RateTable \n            rates={sortedEggRates}\n            showAdmin={true}\n            showState={true}\n            showDate={true}\n            showChart={false}\n            showPriceColumns={false}\n            handleSort={handleSort}\n            onEdit={handleEditRate}\n            onDelete={handleDelete}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AdminPage;"],"names":["_ref","eggRate","setEggRate","handleSubmit","handleSelectAll","handleCopyPreviousRates","_jsxs","onSubmit","className","children","_jsx","type","onClick","value","date","onChange","e","_objectSpread","target","required","placeholder","rate","setIsAuthenticated","navigate","useNavigate","Link","to","handleLogout","states","selectedState","handleStateChange","Select","options","selectedOptions","setSelectedOptions","uniqueOptions","Array","from","Set","map","option","find","isMulti","styles","control","base","backgroundColor","borderColor","boxShadow","padding","borderRadius","menu","zIndex","color","newState","setNewState","handleAddState","newCity","setNewCity","newCityState","setNewCityState","handleAddCity","today","Date","toISOString","split","useState","setOptions","eggRates","setEggRates","loading","setLoading","error","setError","sortConfig","setSortConfig","key","direction","setStates","setSelectedState","removeState","setRemoveState","removeCity","setRemoveCity","removeCityState","setRemoveCityState","selectedDate","setSelectedDate","fetchEggRates","useCallback","fetch","concat","then","res","json","data","catch","console","fetchCitiesAndStates","combinedOptions","stateOptions","state","push","label","forEach","city","useEffect","sortedEggRates","React","sortableRates","sort","a","b","resetForm","message","_Fragment","AdminNavbar","StateSelect","filter","includes","CitySelect","RateForm","preventDefault","payload","cityName","method","headers","body","JSON","stringify","response","allCities","length","alert","async","cities","log","latestRates","fetchLatestRates","updateRates","AddStateForm","name","success","AddCityForm","selectedOption","htmlFor","id","RateTable","rates","showAdmin","showState","showDate","showChart","showPriceColumns","handleSort","onEdit","updatedRates","r","onDelete"],"sourceRoot":""}