{"version":3,"file":"static/js/369.42cd540d.chunk.js","mappings":"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","sources":["components/AddCityForm.js","components/AddStateForm.js","components/AdminNavbar.js","components/AdminPage.js","components/CitySelect.js","components/EggRatesTable.js","components/RateForm.js","components/StateSelect.js"],"sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\nconst AddCityForm = ({\n  states,\n  newCity,\n  setNewCity,\n  newCityState,\n  setNewCityState,\n  handleAddCity,\n}) => (\n  <form onSubmit={handleAddCity} className=\"mb-6 grid grid-cols-1 gap-4\">\n    <Select\n      options={states}\n      value={newCityState}\n      onChange={setNewCityState}\n      className=\"w-full mb-4\"\n      placeholder=\"Select State for New City\"\n    />\n    <input\n      type=\"text\"\n      placeholder=\"New City\"\n      value={newCity}\n      onChange={(e) => setNewCity(e.target.value)}\n      className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n      required\n    />\n    <button\n      type=\"submit\"\n      className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n    >\n      Add City\n    </button>\n  </form>\n);\n\nexport default AddCityForm;","import React from 'react';\n\nconst AddStateForm = ({ newState, setNewState, handleAddState }) => (\n  <form onSubmit={handleAddState} className=\"mb-6 grid grid-cols-1 gap-4\">\n    <input\n      type=\"text\"\n      placeholder=\"New State\"\n      value={newState}\n      onChange={(e) => setNewState(e.target.value)}\n      className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n      required\n    />\n    <button\n      type=\"submit\"\n      className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n    >\n      Add State\n    </button>\n  </form>\n);\n\nexport default AddStateForm;","import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst AdminNavbar = ({setIsAuthenticated}) => {\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  return (\n    <nav className=\"bg-gray-800 p-4 shadow-lg\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <div>\n          <Link to=\"/admin\" className=\"text-white text-2xl font-bold\">Admin Dashboard</Link>\n        </div>\n        <div className=\"flex space-x-4\">\n          <button \n            onClick={handleLogout} \n            className=\"text-white bg-red-600 hover:bg-red-700 px-4 py-2 rounded transition duration-150 ease-in-out\"\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default AdminNavbar;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Select from 'react-select';\nimport AdminNavbar from './AdminNavbar';\nimport StateSelect from './StateSelect';\nimport CitySelect from './CitySelect';\nimport RateForm from './RateForm';\nimport AddStateForm from './AddStateForm';\nimport AddCityForm from './AddCityForm';\nimport EggRatesTable from './EggRatesTable';\n\nconst AdminPage = ({ setIsAuthenticated }) => {\n  const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\n  const [eggRate, setEggRate] = useState({ date: today, rate: '' });\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [eggRates, setEggRates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortConfig, setSortConfig] = useState({ key: 'city', direction: 'ascending' });\n  const [states, setStates] = useState([]);\n  const [selectedState, setSelectedState] = useState(null);\n  const [newState, setNewState] = useState('');\n  const [newCity, setNewCity] = useState('');\n  const [newCityState, setNewCityState] = useState(null);\n  const [removeState, setRemoveState] = useState('');\n  const [removeCity, setRemoveCity] = useState(null);\n  const [removeCityState, setRemoveCityState] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(today);\n\n  const fetchEggRates = useCallback(() => {\n    fetch(`/php/get_all_rates.php?date=${selectedDate}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const latestRates = data.reduce((acc, rate) => {\n          if (!acc[rate.city] || new Date(rate.date) > new Date(acc[rate.city].date)) {\n            acc[rate.city] = rate;\n          }\n          return acc;\n        }, {});\n        setEggRates(Object.values(latestRates));\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n        setError(error);\n        setLoading(false);\n      });\n  }, [selectedDate]);\n\n  useEffect(() => {\n    fetchEggRates();\n    fetchCitiesAndStates();\n  }, [selectedDate, fetchEggRates]);\n\n  const fetchCitiesAndStates = () => {\n    fetch('/php/get_states_and_cities.php')\n      .then(response => response.json())\n      .then(data => {\n        const combinedOptions = [];\n        const stateOptions = [];\n        for (const state in data) {\n          stateOptions.push({ value: state, label: state });\n          combinedOptions.push({\n            value: state,\n            label: state,\n            type: 'state',\n          });\n          data[state].forEach(city => {\n            combinedOptions.push({\n              value: `${city}-${state}`, // Ensure unique value\n              label: `${city}, ${state}`,\n              type: 'city',\n            });\n          });\n        }\n        setOptions(combinedOptions);\n        setStates(stateOptions);\n      })\n      .catch(error => console.error('Error fetching states and cities:', error));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const payload = selectedOptions.map(option => {\n      const [cityName, state] = option.type === 'city' ? option.label.split(', ') : [null, option.value];\n      return {\n        city: cityName,\n        state: state || '', // Ensure state is not null\n        date: eggRate.date,\n        rate: eggRate.rate,\n        type: option.type,\n      };\n    });\n\n    fetch('/php/update_multiple_rates.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload),\n    })\n      .then(res => res.json())\n      .then(response => {\n        fetchEggRates(); // Refresh the list of egg rates\n        resetForm(); // Reset form\n      })\n      .catch(error => console.error(\"Error submitting data:\", error));\n  };\n\n  const handleDelete = (rate) => {\n    fetch('/php/delete_rate.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: rate.id }), // Send ID for deletion\n    })\n      .then(res => res.json())\n      .then(response => {\n        fetchEggRates(); // Refresh the list of egg rates\n      })\n      .catch(error => console.error(\"Error deleting item:\", error));\n  };\n\n  const handleSort = (key) => {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const sortedEggRates = React.useMemo(() => {\n    let sortableRates = [...eggRates];\n    sortableRates.sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) {\n        return sortConfig.direction === 'ascending' ? -1 : 1;\n      }\n      if (a[sortConfig.key] > b[sortConfig.key]) {\n        return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n      return 0;\n    });\n    return sortableRates;\n  }, [eggRates, sortConfig]);\n\n  const handleStateChange = (selectedState) => {\n    setSelectedState(selectedState);\n    setSelectedOptions([]); // Reset selected options\n    const stateOptions = options.filter(option => option.type === 'city' && option.label.includes(selectedState.value));\n    setSelectedOptions(stateOptions);\n  };\n\n  const handleSelectAll = () => {\n    const allCities = options.filter(option => option.type === 'city');\n    setSelectedOptions(allCities);\n  };\n\n  const handleCopyPreviousRates = () => {\n    if (selectedOptions.length === 0) {\n      alert('Please select at least one city.');\n      return;\n    }\n  \n    const fetchLatestRates = async (cities) => {\n      console.log('Fetching latest rates for cities:', cities);\n      const response = await fetch('/php/get_latest_rates.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cities),\n      });\n      const data = await response.json();\n      console.log('Fetched latest rates:', data);\n      return data;\n    };\n  \n    const updateRates = async () => {\n      const cities = selectedOptions\n        .filter(option => option.type === 'city') // Ensure only cities are selected\n        .map(option => {\n          const [cityName, state] = option.label.split(', ');\n          return { city: cityName, state: state };\n        });\n  \n      console.log('Selected cities for updating rates:', cities);\n  \n      const latestRates = await fetchLatestRates(cities);\n  \n      const payload = latestRates.map(rate => ({\n        city: rate.city,\n        state: rate.state,\n        date: eggRate.date,\n        rate: rate.rate || eggRate.rate,\n        type: 'city',\n      }));\n  \n      console.log('Payload for updating rates:', payload);\n  \n      fetch('/php/update_multiple_rates.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      })\n        .then(res => res.json())\n        .then(response => {\n          console.log('Response from updating rates:', response);\n          fetchEggRates(); // Refresh the list of egg rates\n          resetForm(); // Reset form\n        })\n        .catch(error => console.error(\"Error submitting data:\", error));\n    };\n  \n    updateRates();\n  };\n\n  const handleAddState = (e) => {\n    e.preventDefault();\n    fetch('/php/add_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'state', name: newState }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setNewState(''); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error adding state:\", error));\n  };\n\n  const handleAddCity = (e) => {\n    e.preventDefault();\n    fetch('/php/add_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'city', name: newCity, state: newCityState.value }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setNewCity(''); // Reset form\n          setNewCityState(null); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error adding city:\", error));\n  };\n\n  const handleRemoveState = (e) => {\n    e.preventDefault();\n    fetch('/php/remove_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'state', name: removeState }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setRemoveState(''); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error removing state:\", error));\n  };\n\n  const handleRemoveCity = (e) => {\n    e.preventDefault();\n    fetch('/php/remove_state_city.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ type: 'city', name: removeCity.label.split(', ')[0], state: removeCityState.value }),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchCitiesAndStates(); // Refresh the list of states and cities\n          setRemoveCity(null); // Reset form\n          setRemoveCityState(null); // Reset form\n        } else {\n          alert(response.error);\n        }\n      })\n      .catch(error => console.error(\"Error removing city:\", error));\n  };\n\n  const handleEditRate = (rate) => {\n    const updatedRates = eggRates.map(r => r.id === rate.id ? rate : r);\n    setEggRates(updatedRates);\n  \n    // Send the updated rate to the backend\n    fetch('/php/update_rate.php', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(rate),\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          fetchEggRates(); // Refresh the list of egg rates\n        } else {\n          console.error(\"Error updating rate:\", response.error);\n        }\n      })\n      .catch(error => console.error(\"Error updating rate:\", error));\n  };\n\n  const resetForm = () => {\n    setEggRate({ date: today, rate: '' });\n    setSelectedOptions([]);\n    setSelectedState(null);\n    setRemoveState('');\n    setRemoveCity(null);\n    setRemoveCityState(null);\n    setNewState('');\n    setNewCity('');\n    setNewCityState(null);\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error loading data: {error.message}</div>;\n\n  return (\n    <>\n      <AdminNavbar setIsAuthenticated={setIsAuthenticated} />\n      <div className=\"p-6 bg-gray-100 min-h-screen\">\n        <div className=\"max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-md\">\n          <h1 className=\"text-3xl font-bold mb-6 text-center text-blue-600\">Admin Egg Rate Management</h1>\n          <div className=\"mb-6\">\n            <StateSelect\n              states={states}\n              selectedState={selectedState}\n              handleStateChange={handleStateChange}\n            />\n            <CitySelect\n              options={options}\n              selectedOptions={selectedOptions}\n              setSelectedOptions={setSelectedOptions}\n            />\n            <RateForm\n              eggRate={eggRate}\n              setEggRate={setEggRate}\n              handleSubmit={handleSubmit}\n              handleSelectAll={handleSelectAll}\n              handleCopyPreviousRates={handleCopyPreviousRates}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Add New State</h2>\n            <AddStateForm\n              newState={newState}\n              setNewState={setNewState}\n              handleAddState={handleAddState}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Add New City</h2>\n            <AddCityForm\n              states={states}\n              newCity={newCity}\n              setNewCity={setNewCity}\n              newCityState={newCityState}\n              setNewCityState={setNewCityState}\n              handleAddCity={handleAddCity}\n            />\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Remove State</h2>\n            <form onSubmit={handleRemoveState} className=\"mb-6 grid grid-cols-1 gap-4\">\n              <Select\n                options={states}\n                value={states.find(state => state.value === removeState)}\n                onChange={(selectedOption) => setRemoveState(selectedOption.value)}\n                className=\"w-full mb-4\"\n                placeholder=\"Select State to Remove\"\n              />\n              <button type=\"submit\" className=\"bg-red-600 text-white p-3 rounded w-full hover:bg-red-700 transition\">\n                Remove State\n              </button>\n            </form>\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Remove City</h2>\n            <form onSubmit={handleRemoveCity} className=\"mb-6 grid grid-cols-1 gap-4\">\n              <Select\n                options={states}\n                value={states.find(state => state.value === removeCityState?.value)}\n                onChange={setRemoveCityState}\n                className=\"w-full mb-4\"\n                placeholder=\"Select State for City to Remove\"\n              />\n              <Select\n                options={options.filter(option => option.type === 'city' && option.label.includes(removeCityState?.value))}\n                value={removeCity}\n                onChange={setRemoveCity}\n                className=\"w-full mb-4\"\n                placeholder=\"Select City to Remove\"\n              />\n              <button type=\"submit\" className=\"bg-red-600 text-white p-3 rounded w-full hover:bg-red-700 transition\">\n                Remove City\n              </button>\n            </form>\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Current Egg Rates</h2>\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"date\">\n              Select Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n            />\n          </div>\n          <EggRatesTable\n            sortedEggRates={sortedEggRates}\n            handleSort={handleSort}\n            setEggRate={setEggRate}\n            handleDelete={handleDelete}\n            handleEditRate={handleEditRate}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AdminPage;","import React from 'react';\nimport Select from 'react-select';\n\nconst CitySelect = ({ options, selectedOptions, setSelectedOptions }) => {\n  // Remove duplicate cities from options\n  const uniqueOptions = Array.from(new Set(options.map(option => option.value)))\n    .map(value => options.find(option => option.value === value));\n\n  return (\n    <Select\n      isMulti\n      options={uniqueOptions}\n      value={selectedOptions}\n      onChange={setSelectedOptions}\n      className=\"w-full\"\n      styles={{\n        control: (base) => ({\n          ...base,\n          backgroundColor: 'white',\n          borderColor: 'transparent',\n          boxShadow: 'none',\n          '&:hover': {\n            borderColor: 'transparent',\n          },\n          padding: '0.5rem', // Add padding for better touch target\n          borderRadius: '0.375rem', // Tailwind rounded\n        }),\n        menu: (base) => ({\n          ...base,\n          zIndex: 9999,\n        }),\n        placeholder: (base) => ({\n          ...base,\n          color: '#A0AEC0', // Placeholder color for better contrast\n        }),\n      }}\n      placeholder=\"Select Cities, States\"\n    />\n  );\n};\n\nexport default CitySelect;","import React, { useState } from 'react';\n\nconst EggRatesTable = ({ sortedEggRates, handleSort, setEggRate, handleDelete, handleEditRate }) => {\n  const [editingRate, setEditingRate] = useState(null);\n  const [editedRate, setEditedRate] = useState({});\n\n  const handleEditClick = (rate) => {\n    setEditingRate(rate.id);\n    setEditedRate(rate);\n  };\n\n  const handleSaveClick = () => {\n    handleEditRate(editedRate);\n    setEditingRate(null);\n  };\n\n  const handleCancelClick = () => {\n    setEditingRate(null);\n    setEditedRate({});\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setEditedRate((prevRate) => ({\n      ...prevRate,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full bg-white border border-gray-300\">\n        <thead>\n          <tr className=\"bg-gray-200\">\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('city')}\n            >\n              City\n            </th>\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('state')}\n            >\n              State\n            </th>\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('date')}\n            >\n              Date\n            </th>\n            <th\n              className=\"border border-gray-300 p-3 text-left cursor-pointer\"\n              onClick={() => handleSort('rate')}\n            >\n              Rate\n            </th>\n            <th className=\"border border-gray-300 p-3 text-left\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedEggRates.map((rate) => (\n            <tr key={`${rate.city}-${rate.state}-${rate.date}`} className=\"hover:bg-gray-100\">\n              <td className=\"border border-gray-300 p-3\">{rate.city}</td>\n              <td className=\"border border-gray-300 p-3\">{rate.state}</td>\n              <td className=\"border border-gray-300 p-3\">\n                {editingRate === rate.id ? (\n                  <input\n                    type=\"date\"\n                    name=\"date\"\n                    value={editedRate.date}\n                    onChange={handleChange}\n                    className=\"border border-gray-300 p-2 rounded w-full\"\n                  />\n                ) : (\n                  rate.date\n                )}\n              </td>\n              <td className=\"border border-gray-300 p-3\">\n                {editingRate === rate.id ? (\n                  <input\n                    type=\"number\"\n                    name=\"rate\"\n                    value={editedRate.rate}\n                    onChange={handleChange}\n                    className=\"border border-gray-300 p-2 rounded w-full\"\n                  />\n                ) : (\n                  `$${rate.rate}`\n                )}\n              </td>\n              <td className=\"border border-gray-300 p-3 flex space-x-2\">\n                {editingRate === rate.id ? (\n                  <>\n                    <button\n                      onClick={handleSaveClick}\n                      className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\"\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={handleCancelClick}\n                      className=\"bg-gray-500 text-white p-2 rounded hover:bg-gray-600 transition\"\n                    >\n                      Cancel\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    <button\n                      onClick={() => handleEditClick(rate)}\n                      className=\"bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      onClick={() => handleDelete(rate)}\n                      className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition\"\n                    >\n                      Delete\n                    </button>\n                  </>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default EggRatesTable;","import React from 'react';\n\nconst RateForm = ({\n  eggRate,\n  setEggRate,\n  handleSubmit,\n  handleSelectAll,\n  handleCopyPreviousRates,\n}) => {\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-6 grid grid-cols-1 gap-4\">\n      <button\n        type=\"button\"\n        onClick={handleSelectAll}\n        className=\"bg-green-600 text-white p-3 rounded w-full hover:bg-green-700 transition\"\n      >\n        Select All Cities\n      </button>\n      <input\n        type=\"date\"\n        value={eggRate.date}\n        onChange={(e) => setEggRate({ ...eggRate, date: e.target.value })}\n        className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n        required\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Rate\"\n        value={eggRate.rate}\n        onChange={(e) => setEggRate({ ...eggRate, rate: e.target.value })}\n        className=\"border border-gray-300 p-3 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n        required\n      />\n      <button\n        type=\"submit\"\n        className=\"bg-blue-600 text-white p-3 rounded w-full hover:bg-blue-700 transition\"\n      >\n        Update Rates\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleCopyPreviousRates}\n        className=\"bg-yellow-600 text-white p-3 rounded w-full hover:bg-yellow-700 transition\"\n      >\n        Copy Previous Rates\n      </button>\n    </form>\n  );\n};\n\nexport default RateForm;","import React from 'react';\nimport Select from 'react-select';\n\nconst StateSelect = ({ states, selectedState, handleStateChange }) => (\n  <Select\n    options={states}\n    value={selectedState}\n    onChange={handleStateChange}\n    className=\"w-full mb-4\"\n    placeholder=\"Select State\"\n  />\n);\n\nexport default StateSelect;"],"names":["_ref","states","newCity","setNewCity","newCityState","setNewCityState","handleAddCity","_jsxs","onSubmit","className","children","_jsx","Select","options","value","onChange","placeholder","type","e","target","required","newState","setNewState","handleAddState","setIsAuthenticated","navigate","useNavigate","Link","to","onClick","handleLogout","today","Date","toISOString","split","eggRate","setEggRate","useState","date","rate","selectedOptions","setSelectedOptions","setOptions","eggRates","setEggRates","loading","setLoading","error","setError","sortConfig","setSortConfig","key","direction","setStates","selectedState","setSelectedState","removeState","setRemoveState","removeCity","setRemoveCity","removeCityState","setRemoveCityState","selectedDate","setSelectedDate","fetchEggRates","useCallback","fetch","concat","then","response","json","data","latestRates","reduce","acc","city","Object","values","catch","console","useEffect","fetchCitiesAndStates","combinedOptions","stateOptions","state","push","label","forEach","sortedEggRates","React","sortableRates","sort","a","b","resetForm","message","_Fragment","AdminNavbar","StateSelect","handleStateChange","filter","option","includes","CitySelect","RateForm","handleSubmit","preventDefault","payload","map","cityName","method","headers","body","JSON","stringify","res","handleSelectAll","allCities","handleCopyPreviousRates","length","alert","async","cities","log","fetchLatestRates","updateRates","AddStateForm","name","success","AddCityForm","find","selectedOption","htmlFor","id","EggRatesTable","handleSort","handleDelete","handleEditRate","updatedRates","r","uniqueOptions","Array","from","Set","isMulti","styles","control","base","_objectSpread","backgroundColor","borderColor","boxShadow","padding","borderRadius","menu","zIndex","color","editingRate","setEditingRate","editedRate","setEditedRate","handleSaveClick","handleCancelClick","handleChange","prevRate","handleEditClick"],"sourceRoot":""}